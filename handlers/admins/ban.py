from aiogram import Router, F, flags
from aiogram.filters import Command
from aiogram.types import Message

from filters.admin import IsOwner
from handlers.admins.main import get_restriction_time
from loader import bot
from utils.main.users import User

router = Router()


@router.message(Command(commands=['—á—Å', '–∞–Ω—á—Å']), IsOwner())
@flags.throttling_key('default')
async def ban_user_handler(message: Message):
    arg = message.text.split()
    if arg[0].lower() == '/—á—Å':
        arg = arg[1:]
        is_always = False
        reason = ''
        if (len(arg) > 1 and not message.reply_to_message) or (
                len(arg) >= 1 and message.reply_to_message):  # !mute with arg
            restriction_time = get_restriction_time(arg[1] if not message.reply_to_message else arg[0])
            if restriction_time:
                if (len(arg) >= 2 and message.reply_to_message) or (len(arg) >= 3 and not message.reply_to_message):
                    reason = f'\n{" ".join(map(str, arg[2:])) if not message.reply_to_message else " ".join(map(str, arg[1:]))}'
            else:
                if (len(arg) >= 1 and message.reply_to_message) or (len(arg) >= 2 and not message.reply_to_message):
                    reason = f'\n{" ".join(map(str, arg[1:])) if not message.reply_to_message else " ".join(map(str, arg[:]))}'
                restriction_time = None
                is_always = True
        else:
            if (len(arg) >= 1 and message.reply_to_message) or (len(arg) >= 2 and not message.reply_to_message):
                reason = f'\n{" ".join(map(str, arg[1:])) if not message.reply_to_message else " ".join(map(str, arg[:]))}'
            restriction_time = None
            is_always = True
        admin = User(user=message.from_user)

        if message.reply_to_message:
            await User(user=message.reply_to_message.from_user).banf(reason, admin, bot=bot, time=restriction_time,
                                                                     is_always=is_always)
        elif len(arg) >= 1 and arg[0].isdigit():
            await User(id=arg[0]).banf(reason, admin, bot=bot, time=restriction_time, is_always=is_always)
        elif len(arg) >= 1:
            await User(username=arg[0].lower().replace('@', '')).banf(reason, admin, bot=bot, time=restriction_time,
                                                                      is_always=is_always)

        else:
            return await message.reply('üìñ –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ : /mute [user] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]'
                                       '\n ‚ö† –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–∞–Ω/–º—É—Ç –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!')

        return await message.reply('üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω')
    else:
        arg = arg[1:]
        if message.reply_to_message:
            User(user=message.reply_to_message.from_user).edit('ban_source', None)
        elif len(arg) >= 1 and arg[0].isdigit():
            User(id=arg[0]).edit('ban_source', None)
        elif len(arg) >= 1:
            User(username=arg[0].lower().replace('@', '')).edit('ban_source', None)
        else:
            return await message.reply('‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã')
        return await message.reply('üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω')


@router.message(Command(commands=['nickban', 'unnickban', '–∞–Ω–Ω–∏–∫–±–∞–Ω', '–Ω–∏–∫–±–∞–Ω']), IsOwner())
@flags.throttling_key('default')
async def nickban_user_handler(message: Message):
    arg = message.text.split()
    if arg[0].lower() in ['/nickban', '/–Ω–∏–∫–±–∞–Ω']:
        arg = arg[1:]
        if message.reply_to_message:
            User(user=message.reply_to_message.from_user).edit('nickban', True)
        elif len(arg) >= 1 and arg[0].isdigit():
            User(id=arg[0]).edit('nickban', True)
        elif len(arg) >= 1:
            User(username=arg[0].lower().replace('@', '')).edit('nickban', True)
        else:
            return await message.reply('‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã')
        return await message.reply('üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–µ –Ω–∏–∫–∞!')
    else:
        arg = arg[1:]
        if message.reply_to_message:
            User(user=message.reply_to_message.from_user).edit('nickban', False)
        elif len(arg) >= 1 and arg[0].isdigit():
            User(id=arg[0]).edit('nickban', False)
        elif len(arg) >= 1:
            User(username=arg[0].lower().replace('@', '')).edit('nickban', False)
        else:
            return await message.reply('‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã')
        return await message.reply('üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–µ –Ω–∏–∫–∞!')


@router.message(Command(commands=['payban', 'unpayban']), IsOwner())
@flags.throttling_key('default')
async def payban_user_handler(message: Message):
    arg = message.text.split()
    if arg[0].lower() in ['/payban']:
        arg = arg[1:]
        if message.reply_to_message:
            User(user=message.reply_to_message.from_user).edit('payban', True)
        elif len(arg) >= 1 and arg[0].isdigit():
            User(id=arg[0]).edit('payban', True)
        elif len(arg) >= 1:
            User(username=arg[0].lower().replace('@', '')).edit('payban', True)
        else:
            return await message.reply('‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã')
        return await message.reply('üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º!')
    else:
        arg = arg[1:]
        if message.reply_to_message:
            User(user=message.reply_to_message.from_user).edit('payban', False)
        elif len(arg) >= 1 and arg[0].isdigit():
            User(id=arg[0]).edit('payban', False)
        elif len(arg) >= 1:
            User(username=arg[0].lower().replace('@', '')).edit('payban', False)
        else:
            return await message.reply('‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã')
        return await message.reply('üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º!')
