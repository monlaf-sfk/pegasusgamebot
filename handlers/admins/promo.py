from aiogram import Router, F, flags
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from config import owner_id
from filters.admin import IsOwner
from keyboard.main import promo_switch

from utils.main.cash import to_str, get_cash
from utils.main.db import sql
from utils.main.users import User
from utils.promo.promo import Promocode, all_promo

router = Router()


@router.message(Command("promo"), IsOwner())
@flags.rate_limit(rate=1, key='promo_handler')
async def promo_handler(message: Message):
    args = message.text.split()[1:]
    try:
        name, summ, activations = tuple(args)
        xd = 1
    except:
        name, summ, activations, xd = tuple(args)
    if name in all_promo():
        return await message.reply('üö´ –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!')
    Promocode.create(name, int(activations), get_cash(summ), int(xd), message.from_user.id)

    return await message.reply(
        f'üí´ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{name}</code> –Ω–∞ —Å—É–º–º—É {to_str(int(get_cash(summ)))} –∏ –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π'
        f' <b>{activations}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')


@flags.rate_limit(rate=1, key='promo_check_handler')
async def promo_check_handler(message: Message):
    if message.from_user.id == owner_id:
        args = message.text.split()[1:]
        try:
            name = args[0].lower()
        except:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        if name in all_promo():
            promo = Promocode(name)
            return await message.reply(f'üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{promo.name}</code>\n'
                                       f'üÜî –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{promo.owner_id}</code>\n'
                                       f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                       f'üí∞ –°—É–º–º–∞: {promo.summ}\n'
                                       f'üë§ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {promo.activations - len(promo.users)}/{promo.activations}\n'
                                       f'üî± –°—Ç–∞—Ç—É—Å: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if promo.status else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"}\n'
                                       f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                       f'üë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏: {[f"<code>{i}</code>" for i in promo.users]}\n',
                                       reply_markup=promo_switch(message.from_user.id, promo.status, name).as_markup())
    user = User(user=message.from_user)
    donate_source = user.donate_source
    try:
        donate_source = int(donate_source.split(',')[0])
    except AttributeError:
        return
    if donate_source == 2 or donate_source > 4:
        args = message.text.split()[1:]
        try:
            name = args[0].lower()
        except:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        if name in all_promo():
            promo = Promocode(name)
            return await message.reply(f'üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{promo.name}</code>\n'
                                       f'üÜî –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{promo.owner_id}</code>\n'
                                       f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                       f'üí∞ –°—É–º–º–∞: {promo.summ}\n'
                                       f'üë§ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {promo.activations - len(promo.users)}/{promo.activations}\n'
                                       f'üî± –°—Ç–∞—Ç—É—Å: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if promo.status else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"}\n'
                                       f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                       f'üë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏: {[f"<code>{i}</code>" for i in promo.users]}\n')


@flags.rate_limit(rate=1, key='promo_switch_callback')
async def promo_switch_callback(callback_query: CallbackQuery):
    promo_d, id, name = callback_query.data.split('_')
    if int(id) != callback_query.from_user.id:
        return
    else:
        promo = Promocode(name)
        if promo.status == True:
            sql.edit_data('name', name, 'status', False, 'promocodes')
            return await callback_query.message.edit_text(f'üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{promo.name}</code>\n'
                                                          f'üÜî –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{promo.owner_id}</code>\n'
                                                          f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                                          f'üí∞ –°—É–º–º–∞: {promo.summ}\n'
                                                          f'üë§ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {promo.activations - len(promo.users)}/{promo.activations}\n'
                                                          f'üî± –°—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n'
                                                          f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                                          f'üë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏: {[f"<code>{i}</code>" for i in promo.users]}\n',
                                                          reply_markup=promo_switch(callback_query.from_user.id, False,
                                                                                    name).as_markup())
        else:
            sql.edit_data('name', name, 'status', True, 'promocodes')
            return await callback_query.message.edit_text(f'üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{promo.name}</code>\n'
                                                          f'üÜî –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{promo.owner_id}</code>\n'
                                                          f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                                          f'üí∞ –°—É–º–º–∞: {promo.summ}\n'
                                                          f'üë§ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {promo.activations - len(promo.users)}/{promo.activations}\n'
                                                          f'üî± –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n'
                                                          f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                                          f'üë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏: {[f"<code>{i}</code>" for i in promo.users]}\n',
                                                          reply_markup=promo_switch(callback_query.from_user.id, True,
                                                                                    name).as_markup())
