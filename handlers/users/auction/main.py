from uuid import uuid4, UUID

from aiogram import flags
from aiogram.enums import ContentType
from aiogram.types import Message
from aiogram_dialog import (
    Dialog, Window, LaunchMode, DialogManager, StartMode,
)
from aiogram_dialog.widgets.kbd import (
    Start,
)
from aiogram_dialog.widgets.media import StaticMedia
from aiogram_dialog.widgets.text import Const

from config import channel_auction, channel_test
from filters.users import flood_handler
from loader import bot
from utils.auction import Auction
from utils.main.cash import to_str
from utils.main.db import sql
from utils.main.users import User
from . import states

main_auction_dialog = Dialog(
    Window(
        Const("‚ÑπÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ª–æ—Ç—ã –º–æ–∂–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ @pegasus_auction"),
        StaticMedia(
            path="assets/img/diologs/auction_main.png",
            type=ContentType.PHOTO),
        Start(
            text=Const("üìê –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
            id="layout",
            state=states.Category.MAIN,
        ),

        Start(
            text=Const("üìÖ –ú–æ–∏ –ª–æ—Ç—ã"),
            id="cal",
            state=states.MyLots.MAIN,
        ),
        Start(
            text=Const("üíØ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏"),
            id="counter",
            state=states.MyBet.MAIN,
        ),
        state=states.Main.MAIN,
    ),
    launch_mode=LaunchMode.ROOT,
)

MAIN_MENU_BUTTON = Start(
    text=Const("‚Ü©Ô∏è"),
    id="__main__",
    state=states.Main.MAIN,
)


@flags.throttling_key('games')
async def start_auction(message: Message, dialog_manager: DialogManager):
    # it is important to reset stack because user wants to restart everything
    await dialog_manager.start(states.Main.MAIN, mode=StartMode.NEW_STACK)


def is_valid_uuid(val):
    try:
        UUID(str(val))
        return True
    except ValueError:
        return False


@flags.throttling_key('games')
async def auction_lot_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        arg = message.text.split()[1:] if message.text.split()[0].lower() != '–ø—Ä–æ–¥–∞—Ç—å' else message.text.split()

        user = User(user=message.from_user)
        if len(arg) == 0:
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
                                       '<code>/lot –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∫–æ–∏–Ω—ã (–∫–æ–ª-–≤–æ) </code>\n')

        elif arg[0].lower() == '–≤—ã—Å—Ç–∞–≤–∏—Ç—å':
            if arg[1].lower() in ['coins', '–∫–æ–∏–Ω—ã', '–∫–æ–∏–Ω']:
                try:
                    count = int(arg[2])
                except:
                    return await message.reply('‚ùå <code>/lot –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∫–æ–∏–Ω—ã (–∫–æ–ª-–≤–æ) </code>\n!')
                if count > user.coins:
                    return await message.reply('‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω')
                if count < 5:
                    return await message.reply('‚ùå –ú–∏–Ω –∫–æ–ª-–≤–æ –∫–æ–∏–Ω–æ–≤ 5')
                price_curs = sql.execute("SELECT coin_kurs FROM other", commit=False, fetch=True)[0][0]

                user.edit('coins', user.coins - count)
                uuid = str(uuid4().hex)[:15]
                await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –ö–æ–∏–Ω—ã x{count}ü™ô –∑–∞ {to_str((price_curs * count) / 2)}\n'
                                    f'/lot_{uuid}')
                message_id = await bot.send_message(chat_id=channel_auction, text=f'<b>‚öñÔ∏è –ù–æ–≤—ã–π –ª–æ—Ç ‚Ññ{uuid}</b>\n'
                                                                                  f'–ü—Ä–µ–¥–º–µ—Ç:<b> –ö–æ–∏–Ω—ã x{count}ü™ô</b>\n'
                                                                                  f'–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{to_str((price_curs * count) / 2)}</b>\n'
                                                                                  f'<b>–í–ª–∞–¥–µ–ª–µ—Ü –ª–æ—Ç–∞:</b> {user.link}\n',
                                                    disable_web_page_preview=True
                                                    )
                Auction.add_item(seller=user.id, item_name='coins', count=count, price=(price_curs * count) / 2,
                                 uuid=uuid, message_id=message_id.message_id)
                return


        else:
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
                                       '<code>/lot –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∫–æ–∏–Ω—ã (–∫–æ–ª-–≤–æ)</code>\n')


@flags.throttling_key('default')
async def auction_help_handler(message: Message):
    return await message.reply("–ö—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ ‚öñÔ∏è–ê—É–∫—Ü–∏–æ–Ω—É <a href='telegra.ph/Aukcion-05-13-6'>–∑–¥–µ—Å—å.</a>")
