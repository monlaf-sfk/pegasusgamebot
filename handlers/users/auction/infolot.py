import time

from aiogram import flags
from aiogram.enums import ContentType
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager, Dialog, Window, StartMode
from aiogram_dialog.widgets.kbd import Button
from aiogram_dialog.widgets.media import StaticMedia
from aiogram_dialog.widgets.text import Const, Format

from filters.users import flood_handler
from handlers.users.auction import states
from loader import bot
from utils.auction import Auction
from utils.main.cash import to_str4
from utils.main.db import sql, timetostr
from utils.main.users import User


async def product_getter(dialog_manager: DialogManager, **_kwargs):
    return {
        'text': dialog_manager.start_data.get("text"),
        'uuid': dialog_manager.start_data.get("uuid"),
        'price': to_str4(dialog_manager.start_data.get("price", 1)),
    }


@flags.throttling_key('games')
async def update_lot(callback: CallbackQuery, button: Button,
                     dialog_manager: DialogManager):
    item_id = dialog_manager.start_data.get("uuid")
    price_callback = dialog_manager.start_data.get("price")
    try:
        auction = Auction(str(item_id))
    except:
        await callback.answer('‚ö†Ô∏è –≠—Ç–æ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ª–æ—Ç!', show_alert=True)
        return await dialog_manager.done()
    user = User(id=callback.from_user.id)
    price_curs = sql.execute("SELECT coin_kurs FROM other", commit=False, fetch=True)[0][0]
    price = auction.price + ((price_curs * auction.count) / 10)
    if button.widget_id == 'stavka':
        if price > int(price_callback):
            return await callback.answer('‚ùå –≠—Ç–æ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ !\n'
                                         'üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É', show_alert=True)
        if price > user.balance:
            return await callback.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!\n'
                                         f'–¢—Ä–µ–±—É–µ—Ç—Å—è: {price}', show_alert=True)
        if auction.seller == user.id:
            return await callback.answer('‚ùå –°–≤–æ–∏ –ª–æ—Ç—ã –Ω–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å!', show_alert=True)
        if auction.costumers == user.id:
            return await callback.answer('‚ùå –≠—Ç–æ –∏ —Ç–∞–∫ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞!', show_alert=True)
        user.edit('balance', user.balance - price)
        if auction.costumers:
            user_costumers = User(id=auction.costumers)
            user_costumers.edit('balance', user_costumers.balance + auction.price)
            await bot.send_message(chat_id=auction.costumers,
                                   text=f'–í–∞—à—É —Å—Ç–∞–≤–∫—É –ø–µ—Ä–µ–±–∏–ª–∏ ID: <code>{auction.uuid4}</code>\n'
                                        f'üëÅ‚Äçüó® /lot_{auction.uuid4}', disable_web_page_preview=True)

        if int(time.time()) - auction.time > 840:
            auction.editmany(price=price, costumers=user.id,
                             time=auction.time + 60)
        else:
            auction.editmany(price=price, costumers=user.id)
        await callback.answer(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ c–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ {auction.uuid4} –∑–∞ {to_str4(price)}$',
                              disable_web_page_preview=True, show_alert=True)

    text = f'‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ:\n' \
           f'üÜî: <code>{auction.uuid4}</code>\n' \
           f'üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤: x{to_str4(auction.count)} ü™ô\n' \
           f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
           f'üí≤ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {to_str4(auction.price)} {"<i>(–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞)</i>" if auction.costumers == callback.from_user.id else ""}\n' \
           f'üïê –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑: {timetostr(auction.time + 900 - int(time.time()))}' \
           f'üëÅ‚Äçüó® /lot_{auction.uuid4}'
    dialog_manager.start_data["text"] = text
    dialog_manager.start_data["price"] = price
    await dialog_manager.show()


@flags.throttling_key('games')
async def auction_lotinfo_handler(message: Message, dialog_manager: DialogManager):
    flood = await flood_handler(message)
    if flood:
        arg = message.text.split('_')[1:]
        arg = str(arg[0][:15])
        if arg == '':
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
                                       '<code>/lot_(id) </code>')
        try:
            auction = Auction(arg)
        except:
            return await message.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π id –ø—Ä–µ–¥–º–µ—Ç–∞!')
        text = f'‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ:\n' \
               f'üÜî: <code>{auction.uuid4}</code>\n' \
               f'üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤: x{to_str4(auction.count)} ü™ô\n' \
               f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
               f'üí≤ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {to_str4(auction.price)} {"<i>(–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞)</i>" if auction.costumers == message.from_user.id else ""}\n' \
               f'üïê –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑: {timetostr(auction.time + 900 - int(time.time()))}' \
               f'üëÅ‚Äçüó® /lot_{auction.uuid4}'
        price_curs = sql.execute("SELECT coin_kurs FROM other", commit=False, fetch=True)[0][0]
        price = auction.price + ((price_curs * auction.count) / 10)
        await dialog_manager.start(states.InfoLot.MAIN, mode=StartMode.NEW_STACK,
                                   data={'uuid': arg, 'price': price, 'text': text})


infolot_window = Dialog(
    Window(
        Format("{text}"),
        StaticMedia(
            path="assets/img/diologs/auction_main.png",
            type=ContentType.PHOTO),
        Button(
            Format("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É ‚Ä¢ {price}üí≤"),
            id=f'stavka',
            on_click=update_lot,
        ),
        Button(
            Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
            id=f'update',
            on_click=update_lot
        ),
        getter=product_getter,
        state=states.InfoLot.MAIN,
    )
)
