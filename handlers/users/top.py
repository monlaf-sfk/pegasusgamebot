from aiogram import flags
from aiogram.types import Message, CallbackQuery

from config import bot_name
from keyboard.main import top_kb_func, top_back_func
from utils.clan.clan import Clan, Clanuser
from utils.main.cash import transform, to_str2
from utils.main.db import sql

from utils.main.users import User

numbers_emoji = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']


@flags.throttling_key('default')
async def top_handler(message: Message):
    text = 'üîù 10 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ({}):\n<i>üì¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}</i>\n\n'
    arg = ' '.join(
        message.text.split()[1:] if not bot_name.lower() in message.text.split()[0].lower() else message.text.split()[
                                                                                                 2:])
    if len(arg) == 0 or '–æ–±—â' in arg.lower() or '–≤—Å–µ' in arg.lower() or '–≤—Å—ë' in arg.lower():

        top_users = sql.execute(
            'SELECT id, first_name, name, username, deposit+bank+balance, prefix FROM users ORDER BY '
            'deposit+bank+balance DESC LIMIT 200;',
            False,
            True)

    elif '–±–∞–Ω–∫' in arg.lower():
        top_users = sql.execute(
            'SELECT id, first_name, name, username, bank, prefix FROM users ORDER BY bank DESC LIMIT 200;',
            False,
            True)
    elif '–¥–µ–ø–æ–∑–∏—Ç' in arg.lower():
        top_users = sql.execute(
            'SELECT id, first_name, name, username, deposit, prefix FROM users ORDER BY deposit DESC LIMIT 200;',
            False,
            True)
    elif '—É—Ä–æ–≤–µ–Ω—å' in arg.lower():
        top_users = sql.execute(
            'SELECT id, first_name, name, username, level, prefix FROM users ORDER BY level DESC LIMIT 200;',
            False,
            True)
    elif '—Ä–µ—Ñ' in arg.lower():
        top_users = sql.execute(
            'SELECT id, first_name, name, username, refs, prefix FROM users ORDER BY refs DESC LIMIT 200;',
            False,
            True)
    elif '–±–∞–ª–∞–Ω—Å' in arg.lower() or '–±' in arg.lower():
        top_users = sql.execute(
            'SELECT id, first_name, name, username, balance, prefix FROM users ORDER BY balance DESC LIMIT 200;',
            False,
            True)
    elif '–∫–ª–∞–Ω' in arg.lower():
        top_clan = sql.execute('SELECT id, name, win,prefix FROM clans ORDER BY win DESC LIMIT 200;',
                               False,
                               True)
        text = text.format(
            arg.lower().split()[0] if arg.lower().split()[0] != '–ø–æ' else arg.lower().split()[1],
            len(top_clan))
        index = 0
        for clan in top_clan:
            id, name, win, prefix = clan
            if index == 10:
                break
            index += 1
            emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
            text += f'{emoji}. {name + "~[" + prefix + "]" if prefix and name else name} üÜî <code>{id}</code> ‚Äî ' \
                    f'ü•á {win}\n'
        text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        try:
            clan_user = Clanuser(user_id=message.from_user.id)
        except Exception:
            clan_user = None
            text += '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!'
        if clan_user:
            for index, clan in enumerate(top_clan, start=1):
                if clan[0] == clan_user.id_clan:
                    id, name, win, prefix = clan
                    emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
                    text += f'{emoji}. {name + "~[" + prefix + "]" if prefix and name else name} üÜî <code>{id}</code> ‚Äî ' \
                            f'ü•á {win}\n'
                    break
                if index == 200:
                    text += '–í–∞—à –∫–ª–∞–Ω –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø 200!\n'
                    break
        return await message.reply(text=text, disable_web_page_preview=True,
                                   reply_markup=top_kb_func(message.from_user.id).as_markup())
    else:
        return await message.reply(text="‚ùå –û—à–∏–±–∫–∞ , –¢–∞–∫–æ–≥–æ —Ç–æ–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", disable_web_page_preview=True,
                                   reply_markup=top_kb_func(message.from_user.id).as_markup())

    try:
        text = text.format(
            arg.lower().split()[0] if arg.lower().split()[0] != '–ø–æ' else arg.lower().split()[1],
            len(top_users))
    except IndexError:
        text = text.format('–æ–±—â–∏–π', len(top_users))

    index = 0
    for user in top_users:
        user_id, first_name, name, username, balance, prefix = user
        user2 = User(id=user_id)
        donate_source = user2.donate_source
        try:
            donate_source = int(donate_source.split(',')[0])
        except AttributeError:
            donate_source = None
        if donate_source == None or donate_source != 5 and donate_source != 6:
            if index == 10:
                break

            index += 1
            emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
            link = user2.link if user2.notifies else f'<a href="https://t.me/{bot_name}">{name if name else first_name}</a>'
            text += f'{emoji}. {prefix + " " if prefix and name else ""}{link} - (<code>{user_id}</code>) - ' \
                    f'{to_str2(transform(balance)) if not (True in [i in arg.lower() for i in ["—É—Ä–æ–≤–µ–Ω—å", "—Ä–µ—Ñ", "–ª–≤–ª"]]) else balance}\n'

    text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    for index, user_s in enumerate(top_users, start=1):
        if user_s[0] == message.from_user.id:
            index = index
            user2 = User(id=message.from_user.id)
            emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
            user_id, first_name, name, username, balance, prefix = user_s
            link = user2.link if user2.notifies else f'<a href="https://t.me/{bot_name}">{name if name else first_name}</a>'
            text += f'{emoji}. {prefix + " " if prefix and name else ""}{link} - (<code>{user_id}</code>) - ' \
                    f'{to_str2(transform(balance)) if not (True in [i in arg.lower() for i in ["—É—Ä–æ–≤–µ–Ω—å", "—Ä–µ—Ñ", "–ª–≤–ª"]]) else balance}\n'
            break
        if index == 200:
            text += '–í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç–æ–ø 200!\n'
            break
    return await message.reply(text=text, disable_web_page_preview=True,
                               reply_markup=top_kb_func(message.from_user.id).as_markup())


@flags.throttling_key('default')
async def top_handler_call(callback: CallbackQuery):
    text = 'üîù 10 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ({}):\n<i>üì¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}</i>\n\n'
    arg = callback.data.split('_')[1]
    id = int(callback.data.split('_')[2])
    if id != callback.from_user.id:
        return await callback.answer("‚ùå –ù–µ —Ç—Ä–æ–∂—å –Ω–µ —Ç–≤–æ–µ")
    if arg == '–æ–±—â':

        top_users = sql.execute(
            'SELECT id, first_name, name, username, deposit+bank+balance, prefix FROM users ORDER BY '
            'deposit+bank+balance DESC LIMIT 200;',
            False,
            True)

    elif arg == '–±–∞–Ω–∫':
        top_users = sql.execute(
            'SELECT id, first_name, name, username, bank, prefix FROM users ORDER BY bank DESC LIMIT 200;',
            False,
            True)
    elif arg == '–¥–µ–ø–æ–∑–∏—Ç':
        top_users = sql.execute(
            'SELECT id, first_name, name, username, deposit, prefix FROM users ORDER BY deposit DESC LIMIT 200;',
            False,
            True)
    elif arg == '–ª–≤–ª':
        top_users = sql.execute(
            'SELECT id, first_name, name, username, level, prefix FROM users ORDER BY level DESC LIMIT 200;',
            False,
            True)
    elif arg == '—Ä–µ—Ñ':
        top_users = sql.execute(
            'SELECT id, first_name, name, username, refs, prefix FROM users ORDER BY refs DESC LIMIT 200;',
            False,
            True)
    elif arg == '–±–∞–ª–∞–Ω—Å—É':
        top_users = sql.execute(
            'SELECT id, first_name, name, username, balance, prefix FROM users ORDER BY balance DESC LIMIT 200;',
            False,
            True)
    elif '–∫–ª–∞–Ω' in arg.lower():
        top_clan = sql.execute('SELECT id, name, win,prefix FROM clans ORDER BY '
                               'win DESC LIMIT 200;',
                               False,
                               True)

        text = text.format(
            arg.lower().split()[0] if arg.lower().split()[0] != '–ø–æ' else arg.lower().split()[1],
            len(top_clan))

        index = 0
        for clan in top_clan:
            id, name, win, prefix = clan
            if index == 10:
                break
            index += 1
            emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
            text += f'{emoji}. {name + "~[" + prefix + "]" if prefix and name else name} üÜî <code>{id}</code> ‚Äî ' \
                    f'ü•á {win}\n'
        text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        try:
            clan_user = Clanuser(user_id=callback.from_user.id)
        except Exception:
            clan_user = None
            text += '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!'
        if clan_user:
            for index, clan in enumerate(top_clan, start=1):
                if clan[0] == clan_user.id_clan:
                    id, name, win, prefix = clan
                    emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
                    text += f'{emoji}. {name + "~[" + prefix + "]" if prefix and name else name} üÜî <code>{id}</code> ‚Äî ' \
                            f'ü•á {win}\n'
                    break
                if index == 200:
                    text += '–í–∞—à –∫–ª–∞–Ω –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø 200!\n'
                    break

        return await callback.message.edit_text(text=text, disable_web_page_preview=True,
                                                reply_markup=top_back_func(callback.from_user.id).as_markup())
    else:
        return await callback.message.edit_text(text="‚ùå –û—à–∏–±–∫–∞ , –¢–∞–∫–æ–≥–æ —Ç–æ–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                                                disable_web_page_preview=True,
                                                reply_markup=top_kb_func(callback.from_user.id).as_markup())
    try:
        text = text.format(
            arg.lower().split()[0] if arg.lower().split()[0] != '–ø–æ' else arg.lower().split()[1],
            len(top_users))
    except IndexError:
        text = text.format('–æ–±—â–∏–π', len(top_users))

    index = 0
    for user in top_users:
        user_id, first_name, name, username, balance, prefix = user
        user2 = User(id=user_id)
        donate_source = user2.donate_source
        try:
            donate_source = int(donate_source.split(',')[0])
        except AttributeError:
            donate_source = None
        if donate_source == None or donate_source != 5 and donate_source != 6:
            if index == 10:
                break
            index += 1
            emoji = ''.join(numbers_emoji[int(i)] for i in str(index))

            link = user2.link if user2.notifies else f'<a href="https://t.me/{bot_name}">{name if name else first_name}</a>'
            text += f'{emoji}. {prefix + " " if prefix and name else ""}{link} - (<code>{user_id}</code>) - ' \
                    f'{to_str2(transform(balance)) if not (True in [i in arg.lower() for i in ["—É—Ä–æ–≤–µ–Ω—å", "—Ä–µ—Ñ", "–ª–≤–ª"]]) else balance}\n'
    text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    for index, user_s in enumerate(top_users, start=1):
        if user_s[0] == callback.from_user.id:
            index = index
            user2 = User(id=callback.from_user.id)
            emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
            user_id, first_name, name, username, balance, prefix = user_s
            link = user2.link if user2.notifies else f'<a href="https://t.me/{bot_name}">{name if name else first_name}</a>'
            text += f'{emoji}. {prefix + " " if prefix and name else ""}{link} - (<code>{user_id}</code>) - ' \
                    f'{to_str2(transform(balance)) if not (True in [i in arg.lower() for i in ["—É—Ä–æ–≤–µ–Ω—å", "—Ä–µ—Ñ", "–ª–≤–ª"]]) else balance}\n'
            break
        if index == 200:
            text += '–í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç–æ–ø 200!\n'
            break
    return await callback.message.edit_text(text=text, disable_web_page_preview=True,
                                            reply_markup=top_back_func(id).as_markup())
    # 2.16850209236145


@flags.throttling_key('default')
async def topback_handler_call(callback: CallbackQuery):
    id = int(callback.data.split('_')[1])
    if id != callback.from_user.id:
        return await callback.answer("‚ùå –ù–µ —Ç—Ä–æ–∂—å –Ω–µ —Ç–≤–æ–µ")
    text = 'üîù 10 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ({}):\n<i>üì¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}</i>\n\n'

    top_users = sql.execute('SELECT id, first_name, name, username, deposit+bank+balance, prefix FROM users ORDER BY '
                            'deposit+bank+balance DESC LIMIT 200;',
                            False,
                            True)

    text = text.format('–æ–±—â–∏–π', len(top_users))
    index = 0
    for user in top_users:
        user_id, first_name, name, username, balance, prefix = user
        user2 = User(id=user_id)
        donate_source = user2.donate_source
        try:
            donate_source = int(donate_source.split(',')[0])
        except AttributeError:
            donate_source = None
        if donate_source == None or donate_source != 5 and donate_source != 6:
            if index == 10:
                break
            index += 1
            emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
            link = user2.link if user2.notifies else f'<a href="https://t.me/{bot_name}">{name if name else first_name}</a>'
            text += f'{emoji}. {prefix + " " if prefix and name else ""}{link} - (<code>{user_id}</code>) - ' \
                    f'{to_str2(transform(balance))}\n'
    text += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    for index, user_s in enumerate(top_users, start=1):
        if user_s[0] == callback.from_user.id:
            index = index
            user2 = User(id=callback.from_user.id)
            emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
            user_id, first_name, name, username, balance, prefix = user_s
            link = user2.link if user2.notifies else f'<a href="https://t.me/{bot_name}">{name if name else first_name}</a>'
            text += f'{emoji}. {prefix + " " if prefix and name else ""}{link} - (<code>{user_id}</code>) - ' \
                    f'{to_str2(transform(balance))}\n'
            break
        if index == 200:
            text += '–í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç–æ–ø 200!\n'
            break
    return await callback.message.edit_text(text=text, disable_web_page_preview=True,
                                            reply_markup=top_kb_func(id).as_markup())
