import decimal
import random
import time
from contextlib import suppress
from datetime import datetime

from aiogram import flags
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery

from config import bot_name
from keyboard.generate import show_balance_kb, buy_computer_kb, show_computer_kb, show_inv_kb, \
    computer_keyboard
from utils.main.cash import to_str, get_cash
from utils.main.computer import computers, Computer
from utils.main.db import sql, timetostr
from filters.users import flood_handler
from utils.main.users import User

numbers_emoji = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']


# from aiogram_dialog.widgets.text import  Progress

class Progress():
    def __init__(
            self,
            field: str,
            width: int = 10,
            filled="üü•",
            empty="‚¨ú",
    ):
        super().__init__()
        self.field = field
        self.width = width
        self.filled = filled
        self.empty = empty

    async def render_text(self, field) -> str:
        done = round((self.width * field) / 100)
        rest = self.width - done
        return self.filled * done + self.empty * rest + f" {field: 2.0f}%"


@flags.throttling_key('games')
async def computers_hand(call: CallbackQuery):
    user_id = int(call.data.split('_')[1])
    if user_id != call.from_user.id:
        return await call.answer(f'ü§® –£–±–µ—Ä–∏ —Å–≤–æ–∏ —à–∞–ª–æ–≤–ª–∏–≤—ã–µ —Ä—É–∫–∏!')
    FIELD_PROGRESS = 1 / 10 * 100
    computer = Computer(user_id=call.from_user.id)
    user = User(id=call.from_user.id)

    if computer.last != None and (decimal.Decimal(time.time()) - computer.last) < 3600:
        times = '‚åö –í—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –≤–∑–ª–∞–º—ã–≤–∞–ª–∏, –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è!\n' \
                f'–ß–µ—Ä–µ–∑: {timetostr(3600 + computer.last - decimal.Decimal(time.time()))}'
        progres = await Progress(field=FIELD_PROGRESS).render_text(computer.progress)
        with suppress(TelegramBadRequest):
            await call.message.edit_text(text=computer.text.format(name=user.link, progres=progres, time=times),
                                         reply_markup=computer_keyboard(user_id), disable_web_page_preview=True)
        return
    if computer.strength <= 0:
        with suppress(TelegramBadRequest):
            await call.message.edit_text(
                text="üíª –í–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä —Å–ª–æ–º–∞–ª—Å—è –¥–ª—è –ø–æ—á–∏–Ω–∫–∏ \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—á–∏–Ω–∏—Ç—å</code>",
                reply_markup=computer_keyboard(user_id), disable_web_page_preview=True)
        return
    if computer.progress >= 100:
        with suppress(TelegramBadRequest):
            computer.editmany(progress=0, cash=computer.cash + computer.computer['doxod'], last=time.time(),
                              strength=computer.strength - random.randint(1, 5))
            await call.message.edit_text(f'üíª –í—ã –≤–∑–ª–æ–º–∞–ª–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {to_str(computer.computer["doxod"])}\n'
                                         f'üîã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {computer.strength}%',
                                         reply_markup=computer_keyboard(user_id))
        return
    computer.edit('progress', computer.progress + random.randint(5, 10))
    progres = await Progress(field=FIELD_PROGRESS).render_text(computer.progress)
    with suppress(TelegramBadRequest):
        await call.message.edit_text(text=computer.text.format(name=user.link, progres=progres, time=''),
                                     reply_markup=computer_keyboard(user_id), disable_web_page_preview=True)
    return


@flags.throttling_key('default')
async def computers_list_handler(message: Message):
    text = '–°–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:\n'

    for index, i in computers.items():
        emoji = ''.join(numbers_emoji[int(i)] for i in str(index))

        text += f'<code>{emoji}</code>.üíª {i["name"]} \n' \
                f'üíµ –¶–µ–Ω–∞: {to_str(i["price"])}\n' \
                f'üí± –î–æ—Ö–æ–¥: {to_str(i["doxod"])}/—á–∞—Å\n\n'
    return await message.reply(
        text + '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ö–æ–º–ø—å—é—Ç–µ—Ä –∫—É–ø–∏—Ç—å</code> (–Ω–æ–º–µ—Ä) —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å!',
        reply_markup=buy_computer_kb.as_markup())


@flags.throttling_key('default')
async def computers_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[2:]
        try:
            computer = Computer(user_id=message.from_user.id)

        except:
            computer = None
            if len(arg) < 1 or arg[0].lower() != '–∫—É–ø–∏—Ç—å':
                return await computers_list_handler(message)
            try:
                if not arg[1].isdigit():
                    return await computers_list_handler(message)
            except:
                return await computers_list_handler(message)
        if len(arg) == 0:
            user = User(id=message.from_user.id)
            FIELD_PROGRESS = 1 / 10 * 100
            progres = await Progress(field=FIELD_PROGRESS).render_text(computer.progress)
            return await message.reply(text=computer.text.format(name=user.link, progres=progres, time=''),
                                       reply_markup=computer_keyboard(user.id), disable_web_page_preview=True)
        elif arg[0].lower() in ['—Å–ø–∏—Å–æ–∫', '–ª–∏—Å—Ç']:
            return await computers_list_handler(message)

        elif arg[0].lower() == '–ø—Ä–æ–¥–∞—Ç—å':
            doxod = computer.sell()
            sql.execute(f'UPDATE users SET bank = bank + {doxod} WHERE id = {message.from_user.id}')
            await message.reply(f'‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä —Å —É—á—ë—Ç–æ–º –¥–æ—Ö–æ–¥–∞ –≤—ã –ø–æ–ª—É—á–∏–ª–∏: {to_str(doxod)}',
                                reply_markup=show_balance_kb.as_markup())

            return
        elif arg[0].lower() == '–∫—É–ø–∏—Ç—å':
            if computer:
                return await message.reply('‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä, –º–æ–∂–Ω–æ –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ 1.',
                                           reply_markup=show_computer_kb.as_markup())
            try:
                i = computers[int(arg[1])]
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞! 1-4')
            balance = \
                sql.execute(f'SELECT balance FROM users WHERE id = {message.from_user.id}', commit=False,
                            fetchone=True)[0]
            price = i["price"]

            if balance < price:
                return await message.reply(
                    f'üí≤ –ù–∞ —Ä—É–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –Ω—É–∂–Ω–æ: {to_str(price)}')
            Computer.create(user_id=message.from_user.id, computer_index=int(arg[1]))
            sql.execute(f'UPDATE users SET balance = balance - {price}, sell_count = 0 WHERE id ='
                        f' {message.from_user.id}', True)
            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä <b>{i["name"]}</b> –∑–∞'
                                f' {to_str(price)}',
                                reply_markup=show_computer_kb.as_markup())

            return
        elif arg[0].lower() in ['—Å–Ω—è—Ç—å', '–¥–æ—Ö–æ–¥']:
            xd = computer.cash
            if len(arg) > 1:
                try:
                    xd = get_cash(arg[1])
                except:
                    pass
            if computer.cash < xd or computer.cash < 0:
                return await message.reply('üí≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É –∫–æ–º–ø—å—é—Ç–µ—Ä—ã!')
            elif xd <= 0:
                return await message.reply('‚ùå –ù–µ–ª—å–∑—è —Ç–∞–∫!')
            sql.executescript(f'''UPDATE users SET bank = bank + {xd} WHERE id = {message.from_user.id};
                                  UPDATE computers SET cash = cash - {xd} WHERE owner = {message.from_user.id};''',
                              True)

            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {to_str(xd)} —Å –ø—Ä–∏–±—ã–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞!',
                                reply_markup=show_balance_kb.as_markup())

            return


        elif arg[0].lower() in ['–ø–æ—á–∏–Ω–∏—Ç—å', '—á–∏–Ω–∏—Ç—å', '–ø–æ—á–∏–Ω–∫–∞']:
            if computer.strength >= 100:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ —Å–ª–æ–º–∞–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä!',
                                           reply_markup=show_computer_kb.as_markup())
            items = sql.execute(f'SELECT items FROM users WHERE id = {message.from_user.id}', False, True)[0][0]

            if items['8']['count'] < 10:
                return await message.reply(
                    f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {10 - items['8']['count']} <b>–ë–æ–ª—Ç–∏–∫–æ–≤ üî©</b> –¥–ª—è –ø–æ—á–∏–Ω–∫–∏!'",
                    reply_markup=show_inv_kb.as_markup())

            count_items = items['8']['count'] - 10
            sql.executescript(f"UPDATE users SET items = jsonb_set(items, "
                              "'{8, count}', "
                              f"'{count_items}') WHERE id={message.from_user.id};\n"
                              f'UPDATE computers SET strength =strength+ 1 WHERE owner = {message.from_user.id};',
                              commit=True)
            await message.reply('‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ +1%')

            return

        else:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ö–æ–º–ø—å—é—Ç–µ—Ä (—Å–Ω—è—Ç—å\–ø–æ—á–∏–Ω–∏—Ç—å) (—Å—É–º–º–∞)</code>')
