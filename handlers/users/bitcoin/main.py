from aiogram import flags
from aiogram.types import Message

import config
from utils.main.bitcoin import Bitcoin, bitcoins, to_usd
from keyboard.generate import buy_ferm_kb, bitcoin_kb, show_balance_kb, show_ferm_kb
from utils.main.cash import get_cash, to_str
from utils.main.db import sql
from filters.users import flood_handler
from utils.main.users import User


@flags.throttling_key('default')
async def bitcoin_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        try:
            arg = message.text.split()[1:] if not config.bot_name.lower() in message.text.split()[
                0].lower() else message.text.split()[2:]

            if message.text.split()[0].lower() == '–∫—É—Ä—Å' or arg[0].lower() in ['–∫—É—Ä—Å', '–±–∏—Ç–∫–æ–∏–Ω', '–±–∏—Ç–∫–æ–∏–Ω–∞']:
                return await message.reply('üîã –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞:\n'
                                           '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                           f'<b>1BTC</b> = {to_str(to_usd(1))}\n'
                                           f'<b>üíπ –ö—É—Ä—Å –º–µ–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å.</b>')

            # if len(arg) == 0 or arg[0].lower() not in [ '–∫—É–ø–∏—Ç—å']:
            #     return await ferma_handler(message)
            user = User(id=message.from_user.id)
            if len(arg) == 0 and arg[0].lower() not in ['–ø—Ä–æ–¥–∞—Ç—å']:
                return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë–∏—Ç–∫–æ–∏–Ω –∫—É–ø–∏—Ç—å (–∫–æ–ª-–≤–æ)</code>')
            elif arg[0].lower() in ['–ø—Ä–æ–¥–∞—Ç—å']:
                try:
                    if arg[1].isdigit():
                        summ = get_cash(arg[1])
                    else:
                        raise Exception('123')
                except:
                    summ = user.bitcoins
                if summ <= 0:
                    return await message.reply('üò¥ –ö–æ–ª-–≤–æ BTC –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!')
                elif summ > user.bitcoins:
                    return await message.reply('üò¥ –ö–æ–ª-–≤–æ BTC –±–æ–ª—å—à–µ —á–µ–º –±–∞–ª–∞–Ω—Å —Ñ–µ—Ä–º—ã!')

                # now = config.bitcoin_price() -  int(summ * 0.0005)
                # await config.set_bitcoin_price(now)
                user_summ = to_usd(summ)

                sql.executescript(f'UPDATE users SET bitcoins = bitcoins - {summ} WHERE id = {user.id};\n'
                                  f'UPDATE users SET bank = bank + {user_summ} WHERE id = {message.from_user.id};',
                                  True, False)

                await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –±–∏—Ç–∫–æ–∏–Ω—ã –Ω–∞ —Å—É–º–º—É: {to_str(user_summ)} !')

                return
            else:
                try:
                    xa = sql.execute(f'SELECT balance FROM users WHERE id = {message.from_user.id}', False, True)[0][0]
                    summ = get_cash(arg[1]) if arg[1].lower() not in ['–≤—Å—ë', '–≤—Å–µ'] else int(xa / to_usd(1))
                    if summ <= 0:
                        raise Exception('123')
                except (ValueError, OverflowError):
                    return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë–∏—Ç–∫–æ–∏–Ω –∫—É–ø–∏—Ç—å (–∫–æ–ª-–≤–æ)</code>')

                user_summ = to_usd(summ)

                if user_summ > xa:
                    return await message.reply(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –ë–∞–ª–∞–Ω—Å–µ! –ù—É–∂–Ω–æ: {to_str(user_summ)}')

                sql.executescript(f'UPDATE users SET bitcoins = bitcoins + {summ} WHERE id = {user.id};\n'
                                  f'UPDATE users SET balance = balance - {user_summ} WHERE id = {message.from_user.id};',
                                  True, False)

                await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {summ} –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –∑–∞ {to_str(user_summ)}',
                                    reply_markup=show_balance_kb.as_markup())

                # now = config.bitcoin_price() + int(summ * random.choice([0.01, 0.05, 0.04, 0.03, 0]))

                # await config.set_bitcoin_price(now)

                return
        except:
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë–∏—Ç–∫–æ–∏–Ω –ø—Ä–æ–¥–∞—Ç—å\–∫—É–ø–∏—Ç—å (–∫–æ–ª-–≤–æ)</code>')


@flags.throttling_key('default')
async def videocards_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        arg = message.text.split()[1:] if not config.bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[2:]
        if len(arg) == 0 or arg[0].lower() not in ['–∫—É–ø–∏—Ç—å']:
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∫—É–ø–∏—Ç—å (–∫–æ–ª-–≤–æ)</code>')

        try:
            bitcoin = Bitcoin(owner=message.from_user.id)
        except:
            bitcoin = None

        if bitcoin is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã!', reply_markup=buy_ferm_kb.as_markup())

        try:
            count = int(arg[1])
            if count <= 0:
                raise Exception('123')
        except ValueError:
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∫—É–ø–∏—Ç—å (–∫–æ–ª-–≤–æ)</code>')

        cc = bitcoin.videocards if bitcoin.videocards > 0 else 1

        summ = int((bitcoin.bitcoin.videoprice * count) * cc)

        if summ > sql.execute(f'SELECT balance FROM users WHERE id = {message.from_user.id}', False, True)[0][0]:
            return await message.reply(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö, –Ω—É–∂–Ω–æ: {to_str(summ)}',
                                       reply_markup=show_balance_kb.as_markup())
        user = User(id=message.from_user.id)
        donate = 0
        if user.donate:
            item = config.donates[user.donate.id]
            donate = item['videocards']
        have_place = bitcoin.limit_video - bitcoin.videocards if donate == 0 else donate + bitcoin.limit_video - bitcoin.videocards
        if count + bitcoin.videocards > bitcoin.limit_video + donate:
            return await message.reply(
                f'‚ùå –í—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç–µ –ª–∏–º–∏—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –µ—â–µ:  {have_place if have_place >= 0 else 0} —à—Ç.',
                reply_markup=show_balance_kb.as_markup())
        sql.executescript(f'UPDATE bitcoin SET videocards = videocards + {count} WHERE owner = {bitcoin.owner};\n'
                          f'UPDATE users SET balance = balance - {summ} WHERE id = {message.from_user.id};',
                          True, False)

        return await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {count} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç(—É) –∑–∞ {to_str(summ)}',
                                   reply_markup=show_ferm_kb.as_markup())


numbers_emoji = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']


@flags.throttling_key('default')
async def ferma_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        try:
            bitcoin = Bitcoin(owner=message.from_user.id)
        except:
            bitcoin = None

        arg = message.text.split()[1:] if not config.bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[2:]
        if (len(arg) == 0 and bitcoin is None) or (len(arg) > 0 and arg[0].lower() in ['—Å–ø–∏—Å–æ–∫']):
            text = 'üñ•Ô∏è –°–ø–∏—Å–æ–∫ –±–∏—Ç–∫–æ–∏–Ω-—Ñ–µ—Ä–º:\n'
            for index, i in bitcoins.items():
                i = i()
                emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
                text += f'{emoji}. <b>{i.name}</b> \n' \
                        f'üíµ –¶–µ–Ω–∞: {to_str(i.price)} \n' \
                        f'üí± –î–æ—Ö–æ–¥: <code>{i.doxod} BTC</code> \n' \
                        f'üí≤ –ù–∞–ª–æ–≥: <code>{to_str(i.nalog)}</code>\n\n'
            return await message.reply(text=text, reply_markup=buy_ferm_kb.as_markup())

        elif len(arg) > 0 and arg[0].lower() == '–∫—É–ø–∏—Ç—å':
            try:
                index = int(arg[1])
                if index < 1 or index > len(bitcoins):
                    raise Exception('123')
            except:
                return await message.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–µ—Ä–º—ã! 1-4')
            xa = sql.execute(f'SELECT balance FROM users WHERE id = {message.from_user.id}', False, True)[0][0]
            b = bitcoins[index]()
            x = b.price
            if x > xa:
                return await message.reply(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –ù—É–∂–Ω–æ: {to_str(x)}',
                                           reply_markup=show_balance_kb.as_markup())
            Bitcoin.create(message.from_user.id, index)
            sql.execute(f'UPDATE users SET balance = balance - {b.price} WHERE id = {message.from_user.id}',
                        True, False)
            return await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ñ–µ—Ä–º—É <b>{b.name}</b> –∑–∞ {to_str(x)}',
                                       reply_markup=show_ferm_kb.as_markup())

        elif bitcoin is None:
            return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã!', reply_markup=buy_ferm_kb.as_markup())
        elif len(arg) == 0 and bitcoin:
            return await message.reply(text=bitcoin.text(message.from_user.id), reply_markup=bitcoin_kb.as_markup())
        elif len(arg) < 1:
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–§–µ—Ä–º–∞ –∫—É–ø–∏—Ç—å\–ø—Ä–æ–¥–∞—Ç—å\—Å–Ω—è—Ç—å\–Ω–∞–ª–æ–≥ (—Å—É–º–º–∞)</code>')

        elif arg[0].lower() == '–ø—Ä–æ–¥–∞—Ç—å':
            price = bitcoin.sell()
            if price > 0:
                sql.execute(f'UPDATE users SET balance = balance + {price} WHERE id = {message.from_user.id}',
                            True, False)
            return await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Ñ–µ—Ä–º—É –∑–∞ {to_str(price)}')

        elif arg[0].lower() in ['—Å–Ω—è—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏']:
            try:
                if arg[1].isdigit():
                    summ = get_cash(arg[1])
                else:
                    raise Exception('123')
            except:
                summ = bitcoin.balance_
            if summ <= 0:
                return await message.reply('üò¥ –ö–æ–ª-–≤–æ BTC –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!')
            elif summ > bitcoin.balance_:
                return await message.reply('üò¥ –ö–æ–ª-–≤–æ BTC –±–æ–ª—å—à–µ —á–µ–º –±–∞–ª–∞–Ω—Å —Ñ–µ—Ä–º—ã!')

            sql.executescript(f'UPDATE bitcoin SET balance = round(balance - {summ}) WHERE owner = {bitcoin.owner};\n'
                              f'UPDATE users SET bitcoins = bitcoins + {summ} WHERE id = {message.from_user.id};',
                              True, False)

            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {summ} –±–∏—Ç–∫–æ–∏–Ω–æ–≤ —Å –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º—ã!')

            return

        elif arg[0].lower() in ['–Ω–∞–ª–æ–≥', '–Ω–∞–ª–æ–≥–∏']:
            try:
                if arg[1].isdigit():
                    summ = get_cash(arg[1])
                else:
                    raise Exception('123')
            except:
                summ = bitcoin.nalog

            if summ <= 0:
                return await message.reply('üò¥ –°—É–º–º–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é!')
            elif summ > bitcoin.nalog:
                return await message.reply('üò¥ –°—É–º–º–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞–ª–æ–≥ —Ñ–µ—Ä–º—ã!')
            elif sql.execute(f'SELECT bank FROM users WHERE id = {message.from_user.id}', False, True)[0][0] < summ:
                return await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ '
                                           f'–¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤, –Ω—É–∂–Ω–æ: {to_str(bitcoin.nalog)}',
                                           reply_markup=show_balance_kb.as_markup())
            sql.executescript(f'UPDATE bitcoin SET nalog = nalog - {summ} WHERE owner = {bitcoin.owner};\n'
                              f'UPDATE users SET bank = bank - {summ} WHERE id = {message.from_user.id};',
                              True, False)

            return await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥ —Å –±–∞–Ω–∫–∞!',
                                       reply_markup=show_ferm_kb.as_markup())
        else:
            return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–§–µ—Ä–º–∞ –∫—É–ø–∏—Ç—å\–ø—Ä–æ–¥–∞—Ç—å\—Å–Ω—è—Ç—å\–Ω–∞–ª–æ–≥ (—Å—É–º–º–∞)</code>')
