import random
import re

from aiogram import flags
from aiogram.types import Message

from utils.main.users import User
from utils.quests.main import QuestUser


@flags.throttling_key('default')
async def globus_handler(message: Message):
    if len(message.text.split()) == 1:
        emoji = ['‚ñ∂Ô∏è', '‚ùî', 'üí°', '‚ùì', '‚úÖ', '‚û°Ô∏è']
        g2 = random.choice(emoji)
        return await message.reply(f"{g2} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–®–∞—Ä [–≤–æ–ø—Ä–æ—Å]¬ª")

    h = ["–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è - –¥–∞", "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å",
         "—Ö–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã", "–≤–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ", "–ø—Ä–µ–¥—Ä–µ—à–µ–Ω–æ", "—Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å",
         "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è - –Ω–µ—Ç", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –Ω–µ—Ç", " –∑–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - ¬´–î–∞¬ª",
         "–±–µ—Å—Å–ø–æ—Ä–Ω–æ", "–º–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º", "–ª—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å", "—Å–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
         "–î–∞", "–ù–µ—Ç", "–Ω–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π", "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ"]
    g = random.choice(h)
    user = User(id=message.from_user.id)
    await message.reply(f"""üîÆ {user.link}, {g} """, disable_web_page_preview=True)
    result = QuestUser(user_id=user.id).update_progres(quest_ids=18, add_to_progresses=1)
    if result != '':
        await message.answer(text=result.format(user=user.link), disable_web_page_preview=True)


@flags.throttling_key('default')
async def chance_handler(message: Message):
    if len(message.text.split()) == 1:
        emoji = ['‚ñ∂Ô∏è', '‚ùî', 'üí°', '‚ùì', '‚úÖ', '‚û°Ô∏è']
        g2 = random.choice(emoji)
        return await message.reply(f"{g2} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–®–∞–Ω—Å [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]¬ª")

    h = ["–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –æ–∫–æ–ª–æ", "—à–∞–Ω—Å —ç—Ç–æ–≥–æ", "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ",
         "—à–∞–Ω—Å —ç—Ç–æ–≥–æ –Ω–µ –º–µ–Ω—å—à–µ", "—è –¥—É–º–∞—é –≥–¥–µ-—Ç–æ", "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"]
    g = random.choice(h)
    procent = random.randint(0, 100)
    user = User(id=message.from_user.id)
    await message.reply(f"""üìä {user.link}, {g} {procent}%""", disable_web_page_preview=True)
    result = QuestUser(user_id=user.id).update_progres(quest_ids=22, add_to_progresses=1)
    if result != '':
        await message.answer(text=result.format(user=user.link), disable_web_page_preview=True)


@flags.throttling_key('default')
async def choice_handler(message: Message):
    arg = message.text.lower().replace('–≤—ã–±–µ—Ä–∏', '')
    if '–∏–ª–∏' not in arg:
        emoji = ['‚ñ∂Ô∏è', '‚ùî', 'üí°', '‚ùì', '‚úÖ', '‚û°Ô∏è']
        g2 = random.choice(emoji)
        return await message.reply(f"{g2} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–í—ã–±–µ—Ä–∏ [—Ç–µ–∫—Å—Ç] –∏–ª–∏ [—Ç–µ–∫—Å—Ç]¬ª")
    arg = arg.split('–∏–ª–∏')

    if len(arg) < 2:
        emoji = ['‚ñ∂Ô∏è', '‚ùî', 'üí°', '‚ùì', '‚úÖ', '‚û°Ô∏è']
        g2 = random.choice(emoji)
        return await message.reply(f"{g2} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–í—ã–±–µ—Ä–∏ [—Ç–µ–∫—Å—Ç] –∏–ª–∏ [—Ç–µ–∫—Å—Ç]¬ª")

    h = [f"—è –Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –≤—ã–±–µ—Ä—É ¬´{arg[0]}¬ª",
         f"—è –Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –≤—ã–±–µ—Ä—É ¬´{arg[1]}¬ª",
         f"–∫–∞–∫ –ø–æ –º–Ω–µ, ¬´{arg[0]}¬ª –ª—É—á—à–µ, –Ω–æ ¬´{arg[1]}¬ª —Ç–æ–∂–µ –Ω–µ–ø–ª–æ—Ö–æ",
         f"–∫–∞–∫ –ø–æ –º–Ω–µ, ¬´{arg[1]}¬ª –ª—É—á—à–µ, –Ω–æ ¬´{arg[1]}¬ª —Ç–æ–∂–µ –Ω–µ–ø–ª–æ—Ö–æ",
         f"–Ω–µ—Ç –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ ¬´{arg[0]}¬ª",
         f"–Ω–µ—Ç –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ ¬´{arg[1]}¬ª",
         f"–∫–æ–Ω–µ—á–Ω–æ ¬´{arg[0]}¬ª",
         f"–∫–æ–Ω–µ—á–Ω–æ ¬´{arg[1]}¬ª",
         f"–æ—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ ¬´{arg[0]}¬ª –ª—É—á—à–µ!",
         f"–æ—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ ¬´{arg[1]}¬ª –ª—É—á—à–µ!",
         f"–æ—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ ¬´{arg[0]}¬ª –≥–æ—Ä–∞–∑–¥–æ –ª—É—á—à–µ!",
         f"–æ—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ ¬´{arg[1]}¬ª –≥–æ—Ä–∞–∑–¥–æ –ª—É—á—à–µ!",
         f"–Ω–µ—Ç –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ ¬´{arg[0]}¬ª",
         f"–Ω–µ—Ç –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ ¬´{arg[1]}¬ª",
         f"–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –ª—É—á—à–µ ¬´{arg[0]}¬ª, —á–µ–º ¬´{arg[1]}¬ª",
         f"–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –ª—É—á—à–µ ¬´{arg[1]}¬ª, —á–µ–º ¬´{arg[0]}¬ª",
         f"100% ¬´{arg[1]}¬ª –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ",
         f"100% ¬´{arg[0]}¬ª –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ",
         f"–∫–æ–Ω–µ—á–Ω–æ ¬´{arg[0]}¬ª –ª—É—á—à–µ!",
         f"–∫–æ–Ω–µ—á–Ω–æ ¬´{arg[1]}¬ª –ª—É—á—à–µ!"]
    g = random.choice(h)
    user = User(id=message.from_user.id)
    await message.reply(f"""‚öñÔ∏è {user.link}, {g}  """, disable_web_page_preview=True)
    result = QuestUser(user_id=user.id).update_progres(quest_ids=21, add_to_progresses=1)
    if result != '':
        await message.answer(text=result.format(user=user.link), disable_web_page_preview=True)


rotateText = {
    'q': 'q',
    'w': ' ç',
    'e': '«ù',
    'r': '…π',
    't': ' á',
    'y': ' é',
    'u': 'u',
    'i': '·¥â',
    'o': 'o',
    'p': 'p',
    'a': '…ê',
    's': 's',
    'd': 'd',
    'f': '…ü',
    'g': '∆É',
    'h': '…•',
    'j': '…æ',
    'k': ' û',
    'l': 'l',
    'z': 'z',
    'x': 'x',
    'c': '…î',
    'v': ' å',
    'b': 'b',
    'n': 'n',
    'm': '…Ø',
    '–π': '≈Ü',
    '—Ü': '«π',
    '—É': ' é',
    '–∫': ' û',
    '–µ': '«ù',
    '–Ω': '–Ω',
    '–≥': '…π',
    '—à': 'm',
    '—â': 'm',
    '–∑': 'Œµ',
    '—Ö': '—Ö',
    '—ä': 'q',
    '—Ñ': '—Ñ',
    '—ã': 'ƒ±q',
    '–≤': ' ö',
    '–∞': '…ê',
    '–ø': 'u',
    '—Ä': 'd',
    '–æ': '–æ',
    '–ª': 'v',
    '–¥': '…ì',
    '–∂': '–∂',
    '—ç': '—î',
    '—è': ' Å',
    '—á': '“ª',
    '—Å': '…î',
    '–º': 'w',
    '–∏': '–∏',
    '—Ç': '…Ø',
    '—å': 'q',
    '–±': '∆ç',
    '—é': 'oƒ±',
    '!': '¬°',
    '?': '¬ø',
    '.': 'Àô',
    ',': '\'',
    '\'': ',',
    '\"': '‚Äû',
    '`': ',',
    '(': ')',
    ')': '(',
    '<': '>',
    '>': '<',
    '{': '}',
    '}': '{',
    '[': ']',
    ']': '[',
    '&': '‚Öã',
    '@': '@',
    '#': '#',
    '$': '$',
    '%': '%',
    '^': '^',
    '*': '*',
    '+': '‚Å∫',
    '-': '-',
    '=': '=',
    '/': '/',
    '\\': '\\',
    '|': '|',
    '_': '_',
    '~': '‚Åì',
}


async def process_rotate_command(text):
    reversed_text = ''
    for char in text:
        if char in rotateText:
            reversed_text += rotateText[char]
        else:
            reversed_text += char
    reversed_text = reversed_text[::-1]  # Reverse the text
    return f'–¥–µ—Ä–∂–∏: "{reversed_text}"'


async def reverse_handler(message: Message):
    match = re.match(r'^–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏\s(.*)$', message.text, re.IGNORECASE)
    if match:
        text_to_rotate = match.group(1)[:350]
        result = await process_rotate_command(text_to_rotate)
        await message.reply(result)
    else:
        await message.reply("‚ùî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ [—Ç–µ–∫—Å—Ç –¥–æ 350 —Å–∏–º–≤–æ–ª–æ–≤]¬ª")
