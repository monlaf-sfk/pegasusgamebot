import time

from aiogram import flags

from config import bot_name
from keyboard.generate import show_business_kb, show_balance_kb, buy_business_kb, business_kb
from aiogram.types import Message

from utils.main.cash import to_str, get_cash
from utils.main.businesses import Business, businesses
from utils.main.db import sql

from filters.users import flood_handler

numbers_emoji = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']


@flags.throttling_key('default')
async def businesses_list_handler(message: Message):
    text = '–ù–∞–∑–≤–∞–Ω–∏–µ - —Ü–µ–Ω–∞ - –¥–æ—Ö–æ–¥ - –Ω–∞–ª–æ–≥\n'
    asd = sql.execute(f'SELECT sell_count FROM users WHERE id = {message.from_user.id}', False, True)[0][0]
    if asd is None:
        asd = 0
    xa = asd = float(f'0.{asd}')
    for index, i in businesses.items():
        emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
        price = i["price"] - int(i["price"] * xa)
        text += f'<code>{emoji}</code>. {i["name"]} - {to_str(price)} - {to_str(i["doxod"])}' \
                f' - {to_str(i["nalog"])}\n'
    return await message.reply(
        f'<i>(–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: x{asd})</i>\n\n'
        + text + '\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë–∏–∑ –∫—É–ø–∏—Ç—å (–Ω–æ–º–µ—Ä)</code> —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å!',
        reply_markup=buy_business_kb.as_markup())


@flags.throttling_key('default')
async def business_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[2:]
        try:
            business = Business(user_id=message.from_user.id)
        except:
            business = None
            if len(arg) < 1 or arg[0].lower() != '–∫—É–ø–∏—Ç—å':
                return await businesses_list_handler(message)
            try:
                if not arg[1].isdigit():
                    return await businesses_list_handler(message)
            except:
                return await businesses_list_handler(message)
        if len(arg) == 0:
            return await message.reply(text=business.text, reply_markup=business_kb.as_markup())
        elif arg[0].lower() in ['—Å–ø–∏—Å–æ–∫', '–ª–∏—Å—Ç']:
            return await businesses_list_handler(message)
        elif arg[0].lower() == '–ø—Ä–æ–¥–∞—Ç—å':
            doxod = business.sell()
            sql.execute(f'UPDATE users SET bank = bank + {doxod} WHERE id = {message.from_user.id}', True, False)
            await message.reply(f'‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ –±–∏–∑–Ω–µ—Å –∏ —Å —É—á—ë—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤, –∏ –¥–æ—Ö–æ–¥–∞ –≤—ã –ø–æ–ª—É—á–∏–ª–∏: {to_str(doxod)}',
                                reply_markup=show_balance_kb.as_markup())

            return
        elif arg[0].lower() == '–∫—É–ø–∏—Ç—å':

            if business:
                return await message.reply('‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å, –º–æ–∂–Ω–æ –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ 1.',
                                           reply_markup=show_business_kb.as_markup())
            try:
                i = businesses[int(arg[1])]
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞! 1-6')

            xa = sql.execute(f'SELECT sell_count, balance FROM users WHERE id = {message.from_user.id}', False, True)[0]
            balance = xa[1]
            xa = xa[0]
            if xa is None:
                xa = 0
            xa = float(f'0.{xa}')
            price = i["price"] - int(i["price"] * xa)

            if balance < price:
                return await message.reply(
                    f'üí≤ –ù–∞ —Ä—É–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –Ω—É–∂–Ω–æ: {to_str(price)}',
                    reply_markup=show_balance_kb.as_markup())

            Business.create(user_id=message.from_user.id, business_index=int(arg[1]))
            sql.execute(f'UPDATE users SET balance = balance - {price}, sell_count = 0 WHERE id ='
                        f' {message.from_user.id}', True)
            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –±–∏–∑–Ω–µ—Å {i["name"]} –∑–∞ {to_str(price)}',
                                reply_markup=show_business_kb.as_markup())

            return
        elif arg[0].lower() in ['–∑–∞–∫—Ä—ã—Ç—å', '–æ—Ç–∫—Ä—ã—Ç—å']:
            business.editmany(arenda=not business.arenda, last=time.time() if (not business.arenda) is True else None)
            await message.reply('üîì –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!' if business.arenda else
                                'üîí –í—ã –∑–∞–∫—Ä—ã–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!',
                                reply_markup=show_business_kb.as_markup())

            return
        elif arg[0].lower() in ['—Å–Ω—è—Ç—å', '–¥–æ—Ö–æ–¥']:
            xd = business.cash
            if len(arg) > 1:
                try:
                    xd = get_cash(arg[1])
                except:
                    pass
            if business.cash < xd or business.cash < 0:
                return await message.reply('üí≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É –±–∏–∑–Ω–µ—Å–∞!',
                                           reply_markup=show_balance_kb.as_markup())
            elif xd <= 0:
                return await message.reply('‚ùå –ù–µ–ª—å–∑—è —Ç–∞–∫!')
            sql.executescript(f'''UPDATE users SET bank = bank + {xd} WHERE id = {message.from_user.id};
            UPDATE businesses SET cash = {business.cash - xd} WHERE owner = {business.owner};''', True)

            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {to_str(business.cash)} —Å –ø—Ä–∏–±—ã–ª–∏ –±–∏–∑–Ω–µ—Å–∞!',
                                reply_markup=show_balance_kb.as_markup())

            return
        elif arg[0].lower() in ['–Ω–∞–ª–æ–≥', '–Ω–∞–ª–æ–≥–∏']:
            xd = business.nalog
            if len(arg) > 1:
                try:
                    xd = get_cash(arg[1])
                except:
                    pass
            if business.nalog < 1:
                return await message.reply('üí≤ –ù–∞–ª–æ–≥ –Ω–∞ –±–∏–∑–Ω–µ—Å –∏ —Ç–∞–∫ –æ–ø–ª–∞—á–µ–Ω!',
                                           reply_markup=show_business_kb.as_markup())
            elif business.nalog < xd:
                xd = business.nalog
            elif xd <= 0:
                return await message.reply('‚ùå –ù–µ–ª—å–∑—è —Ç–∞–∫!')
            if sql.execute(f'SELECT bank FROM users WHERE id = {message.from_user.id}', False, True)[0][0] < xd:
                return await message.reply(f'üí≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞, –Ω—É–∂–Ω–æ: {to_str(xd)}!',
                                           reply_markup=show_balance_kb.as_markup())

            sql.executescript(f'''UPDATE users SET bank = bank - {xd} WHERE id = {message.from_user.id};
                    UPDATE businesses SET nalog = {business.nalog - xd} WHERE owner = {business.owner};''', True)

            await message.reply('‚úÖ –ù–∞–ª–æ–≥ –Ω–∞ –±–∏–∑–Ω–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!', reply_markup=show_business_kb.as_markup())

            return
        else:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë–∏–∑–Ω–µ—Å (—Å–Ω—è—Ç—å\—Å–¥–∞—Ç—å\–æ–ø–ª–∞—Ç–∏—Ç—å) (—Å—É–º–º–∞)</code>')
