import asyncio

from aiogram import flags
from aiogram.types import Message
from filters.users import flood_handler2, flood_handler
from config import bot_name
from keyboard.games import play_spin_kb
from keyboard.generate import show_balance_kb
from utils.main.cash import to_str, get_cash
from utils.main.users import User

from typing import List, Tuple

from utils.quests.main import QuestUser


def get_score_change(dice_value: int) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    :param dice_value: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–π—Å–∞ (—á–∏—Å–ª–æ)
    :return: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –∏–≥—Ä–æ–∫–∞ (—á–∏—Å–ª–æ)
    """
    # –°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∫—Ä–æ–º–µ 777)
    if dice_value in (1, 22, 43):
        return 3
    # –ù–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –¥–≤—É—Ö —Å–µ–º—ë—Ä–æ–∫ (–æ–ø—è—Ç—å –∂–µ, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º 64)
    elif dice_value in (16, 32, 48, 61, 62, 63):
        return 2
    # –ù–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –¥–≤—É—Ö –ª–∏–º–æ–Ω–æ–≤ (–æ–ø—è—Ç—å –∂–µ, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º 43)
    elif dice_value in (59, 27, 11, 41, 42, 44):
        return 1
    # –ù–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –¥–≤—É—Ö –±–∞—Ä (–æ–ø—è—Ç—å –∂–µ, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º 1)
    elif dice_value in (17, 33, 49, 2, 3, 4):
        return 1
    # –ù–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –¥–≤—É—Ö –≤–∏–Ω–æ–≥—Ä–∞–¥ (–æ–ø—è—Ç—å –∂–µ, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º 22)
    elif dice_value in (38, 6, 54, 23, 24, 21):
        return 1
    # –î–∂–µ–∫–ø–æ—Ç (—Ç—Ä–∏ —Å–µ–º—ë—Ä–∫–∏)
    elif dice_value == 64:
        return 4
    else:
        return -1


def get_combo_text(dice_value: int) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, —á—Ç–æ –±—ã–ª–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–∞–π—Å–µ-—Å–ø–∏–Ω
    :param dice_value: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–π—Å–∞ (—á–∏—Å–ª–æ)
    :return: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –≤—ã–ø–∞–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—â—ë —Ä–∞–∑ —Å–ø–∞—Å–∏–±–æ t.me/svinerus):
        return [casino[(dice_value - 1) // i % 4]for i in (1, 4, 16)]
    """
    #           0       1         2        3
    values = ["BAR", "üçá", "üçã", "7Ô∏è‚É£"]

    dice_value -= 1
    result = []
    for _ in range(3):
        result.append(values[dice_value % 4])
        dice_value //= 4
    return result


def get_combo_data(dice_value: int) -> Tuple[int, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã–µ
    :param dice_value: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–π—Å–∞ (—á–∏—Å–ª–æ)
    :return: –ü–∞—Ä–∞ ("–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞", "—Å–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    """
    return (
        get_score_change(dice_value),
        ', '.join(get_combo_text(dice_value))
    )


multiplier_dict = {
    1: 1.5,
    2: 2,
    3: 2.5,
    4: 3
}


@flags.throttling_key('default')
async def spin_handler(message: Message):
    flood2 = await flood_handler2(message)
    flood = await flood_handler(message)
    if flood and flood2:

        arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[2:]
        user = User(user=message.from_user)
        if len(arg) == 0:
            return await message.reply(f'üé∞ {user.link}, –¥–ª—è –∏–≥—Ä—ã –≤ –°–ø–∏–Ω –≤–≤–µ–¥–∏—Ç–µ ¬´–°–ø–∏–Ω [—Å—Ç–∞–≤–∫–∞]¬ª üëçüèº \n'
                                       'üí° –°—É–º–º—É —Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´1–∫¬ª - —Å—Ç–∞–≤–∫–∞ –Ω–∞ 1000), –ª–∏–±–æ —Å–ª–æ–≤–∞–º–∏ ¬´–≤—Å–µ¬ª (—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å)'
                                       , disable_web_page_preview=True,
                                       reply_markup=play_spin_kb.as_markup())

        try:
            summ = ssumm = get_cash(arg[0] if arg[0].lower() not in ['–≤—Å—ë', '–≤—Å–µ'] else str(user.balance))
        except:
            summ = ssumm = 0
        if summ <= 0:
            return await message.reply(f'‚ùå {user.link}, –°—Ç–∞–≤–∫–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é', disable_web_page_preview=True)

        if user.balance < summ:
            return await message.reply(f'‚ùå {user.link}, –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö –¥–ª—è —Å—Ç–∞–≤–∫–∏! üí∏',
                                       disable_web_page_preview=True,
                                       reply_markup=show_balance_kb.as_markup())

        casino = (await message.reply_dice(emoji='üé∞')).dice
        score_change, combo_text = get_combo_data(casino.value)

        if score_change < 0:
            user.edit('balance', user.balance - summ)
            await asyncio.sleep(2.5)
            return await message.reply(
                f'üòñ {user.link}, –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ —É–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ (x0) –∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {to_str(summ)}!\n'
                f'üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {str(combo_text).replace(",", " ")}', disable_web_page_preview=True,
                reply_markup=play_spin_kb.as_markup())

        if score_change in multiplier_dict:
            multiplier = multiplier_dict[score_change]
            summ = int(summ * multiplier)
            user.edit('balance', user.balance + summ - ssumm)
            await asyncio.sleep(2.5)
            await message.reply(
                f'üé∞ {user.link}, –í—ã —É–º–Ω–æ–∂–∏–ª–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –Ω–∞ (x{multiplier}) –∏ –ø–æ–ª—É—á–∏–ª–∏ +{to_str(summ)} –Ω–∞ –±–∞–ª–∞–Ω—Å!\n'
                f'üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {str(combo_text).replace(",", " ")}',
                disable_web_page_preview=True,
                reply_markup=play_spin_kb.as_markup()

            )

            result = QuestUser(user_id=user.id).update_progres(quest_ids=2, add_to_progresses=1)
            if result != '':
                await message.reply(text=result.format(user=user.link), disable_web_page_preview=True)
