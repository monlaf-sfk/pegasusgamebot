import decimal
import random
import time

from aiogram import flags
from aiogram.types import Message
from random import choices, randint

from utils.main.cash import to_str
from utils.main.db import timetomin
from utils.main.users import User

dbonus = {
    'vip': 55,
    'premium': 60,
    'admin': 65,
    'elit': 50,
    'beta': 40,
    1: 55,
    2: 60,
    3: 65,
    4: 55,
    5: 40
}


class Rob:
    @staticmethod
    def rob(ow: User, user: User):
        if user.donate or user.shield_count > 0:
            if user.shield_count > 0:
                user.edit('shield_count', user.shield_count - 1)
            return False
        r = user.balance // 4
        if r > 25000000:
            r = random.randint(0, 25000000)
        else:
            r = random.randint(0, int(user.balance // 4))
        if ow.donate:
            chance = dbonus[ow.donate.id]
        else:
            chance = 50
        cash = random.choices([+r, 0, -r], weights=(chance, 50, 50), k=1)[0]
        if cash > 0:
            user.edit('balance', user.balance - cash)
        return cash

    def __init__(self, name: str, price_range: tuple):
        self.name = name
        self.price_range = price_range

    def press(self, donate: str = None):
        if donate:
            chance = dbonus[donate]
        else:
            chance = 50
        summ = randint(*self.price_range)
        result = choices([+summ, 0, -summ], weights=(chance, 50, 50), k=1)[0]
        return result


robs = {
    Rob('–ú—ç—Ä–∏—è üè¢', (45000, 100000)): lambda txt: True in [i in txt for i in [
        '–º–µ—Ä–∏—è', '–º—ç—Ä–∏—è',
        '–º–µ—Ä–∏–∞', '–º–µ—Ä–∏—é',
        '–º—ç—Ä–∏—é', '–º–µ—Ä–∏—É']],
    Rob('–ë–∞–Ω–∫ üè¶', (45000, 100000)): lambda txt: True in [i in txt for i in [
        '–±–∞–Ω–∫',
        'bank',
        '–±—ç–Ω–∫',
        '–±–ø–Ω–∫'
    ]],
    Rob('–û—Ñ–∏—Å –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ üò∂‚Äçüå´Ô∏è', (45000, 100000)): lambda txt: True in [i in txt for i in [
        '–æ—Ñ–∏—Å',
        '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç',
        '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞',
        '–ø—Ä–µ–∑–∏–∫–∞'
    ]]
}


@flags.throttling_key('default')
async def rob_func(message):
    user = User(user=message.from_user)
    if (decimal.Decimal(float(time.time())) - user.last_rob) < 7200:
        xd = int(decimal.Decimal(float(time.time())) - user.last_rob)
        xa = str(xd / 3600).split('.')
        x = '1—á ' + timetomin(xd) if xa[0] == '2' or int(xa[1]) > 0 else timetomin(xd)
        return await message.reply(f'‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë <code>{x}</code> –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞–±–∏—Ç—å!')
    if message.reply_to_message.from_user.id == message.from_user.id:
        return await message.reply('‚ùå –ù–µ–ª—å–∑—è —Ç–∞–∫...')
    cash = Rob.rob(user, User(user=message.reply_to_message.from_user))
    if cash is False:
        user.edit('last_rob', time.time())
        return await message.reply('üõ°Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ –±—ã–ª —â–∏—Ç –∏–ª–∏ '
                                   '–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è!')
    elif cash == 0:
        user.edit('last_rob', time.time())
        return await message.reply('ü•∑ –£ –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ù–æ —Ç—ã —Å–º–æ–≥ —É–±–µ–∂–∞—Ç—å')
    elif cash < 0:
        user.editmany(last_rob=time.time(),
                      balance=user.balance + cash if user.balance >= -cash else 0)
        return await message.reply('ü•∑ –í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–æ —Ç–∞–∫ –∫–∞–∫ '
                                   f'–≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ —É–±–µ–∂–∞—Ç—å, —Ç–æ —É –≤–∞—Å –æ—Ç–æ–±—Ä–∞–ª–∏: {to_str(cash)}')
    elif cash > 0:
        user.editmany(last_rob=time.time(),
                      balance=user.balance + cash)
        return await message.reply(f'ü•∑ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏–ª–∏: {to_str(cash)}. –ë—ã—Å—Ç—Ä–µ–µ '
                                   f'–¥–µ–ª–∞–π –Ω–æ–≥–∏ –æ—Ç—Å—é–¥–∞')


@flags.throttling_key('default')
async def rob_handler(message: Message):
    arg = message.text.split()[1:] if message.text.split()[0].lower() != '–ø—Ä–æ–¥–∞—Ç—å' else message.text.split()
    if len(arg) == 0:
        if not message.reply_to_message:
            return await message.reply('üç¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–û–≥—Ä–∞–±–∏—Ç—å –ú—ç—Ä–∏—é\–ë–∞–Ω–∫</code>')
        else:
            return await rob_func(message)
    else:
        if message.reply_to_message:
            if message.reply_to_message.from_user.id == message.from_user.id:
                return await message.reply('‚ùå –ù–µ–ª—å–∑—è —Ç–∞–∫...')
            return await rob_func(message)
        else:
            user = User(user=message.from_user)
            if (decimal.Decimal(float(time.time())) - user.last_rob) < 7200:
                xd = int(decimal.Decimal(float(time.time())) - user.last_rob)
                xa = str(xd / 3600).split('.')
                x = '1—á ' + timetomin(xd) if xa[0] == '2' or int(xa[1]) > 0 else timetomin(xd)
                return await message.reply(f'‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë <code>{x}</code> –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞–±–∏—Ç—å!')

            name = arg[0].lower()
            item = None
            for item, func in robs.items():
                if func(name):
                    break
            if item is None:
                return await message.reply('‚ùå –¢–∞–∫–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            cash = item.press()
            if cash == 0:
                user.edit('last_rob', time.time())
                return await message.reply(f'ü•∑ –í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –æ–≥—Ä–∞–±–∏—Ç—å {item.name} –∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–æ —Ç–∞–∫ –∫–∞–∫ '
                                           '–≤—ã —É—Å–ø–µ–ª–∏ —É–±–µ–∂–∞—Ç—å, —Ç–æ —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–ª–∏!')
            elif cash < 0:
                user.editmany(last_rob=time.time(),
                              balance=user.balance + cash if user.balance >= -cash else 0)
                return await message.reply(f'ü•∑ –í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –æ–≥—Ä–∞–±–∏—Ç—å {item.name} –∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–æ —Ç–∞–∫ –∫–∞–∫ '
                                           f'–≤—ã –ù–ï —É—Å–ø–µ–ª–∏ —É–±–µ–∂–∞—Ç—å, —Ç–æ —É –≤–∞—Å –æ—Ç–æ–±—Ä–∞–ª–∏: {to_str(cash)}')
            elif cash > 0:
                user.editmany(last_rob=time.time(),
                              balance=user.balance + cash)
                return await message.reply(f'ü•∑ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ {item.name} –∏ –ø–æ–ª—É—á–∏–ª–∏: {to_str(cash)}. –ë—ã—Å—Ç—Ä–µ–µ '
                                           f'—É–±–µ–≥–∞–π—Ç–µ!!!')


@flags.throttling_key('default')
async def shield_handler(message: Message):
    arg = message.text.split()[1:] if message.text.split()[0].lower() != '–ø—Ä–æ–¥–∞—Ç—å' else message.text.split()
    user = User(user=message.from_user)
    if len(arg) == 0:
        return await message.reply(f'<b>üõ°Ô∏è –ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö —â–∏—Ç–æ–≤:</b> <code>{user.shield_count}</code>\n\n'
                                   '–í–≤–µ–¥–∏—Ç–µ: <code>–©–∏—Ç (–∫–æ–ª-–≤–æ)</code> —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —â–∏—Ç!')
    else:
        try:
            count = int(arg[0])
        except:
            count = 1
        price = 250000 * count
        if count <= 0:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ö–æ–ª-–≤–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é!')
        if user.balance < price:
            return await message.reply(f'üí≤ –î–ª—è –ø–æ–∫—É–ø–∫–∏ {count} —â–∏—Ç(–∞) –Ω—É–∂–Ω–æ: {to_str(price)}')
        user.editmany(shield_count=user.shield_count + count, balance=user.balance - price)
        return await message.reply(f'üõ°Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {count} —â–∏—Ç(–æ–≤) –∑–∞ {to_str(price)}!\n\n'
                                   f'–¢–µ–ø–µ—Ä—å –≤–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –æ–≥—Ä–∞–±–∏—Ç {count} —Ä–∞–∑ :)')
