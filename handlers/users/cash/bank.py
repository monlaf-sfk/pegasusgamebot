import datetime
import time

from aiogram import flags
from aiogram.types import Message

import config
from utils.logs import writelog
from utils.main.cash import to_str, get_cash
from utils.main.db import timetostr, sql
from utils.main.users import User

from filters.users import flood_handler
from utils.quests.main import QuestUser


@flags.throttling_key('default')
async def bank_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        spliy = message.text.split() if not config.bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[1:]
        user = User(user=message.from_user)
        try:
            arg = abs(get_cash(spliy[2].lower().replace('–≤—Å—ë', str(user.bank)).replace('–≤—Å–µ', str(user.bank)))) if \
                spliy[
                    1].lower() in ['—Å–Ω—è—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏', '–æ–±–Ω–∞–ª–∏—á–∏—Ç—å'] else abs(get_cash(
                spliy[2].lower().replace('–≤—Å—ë', str(user.balance)).replace('–≤—Å–µ', str(user.balance))))
            if arg <= 0:
                raise Exception(123)
        except:
            await message.reply(f'{user.link}, –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á—ë—Ç–µ: {to_str(user.bank)}\n'
                                '‚ùì –û—Ç–∫—Ä–æ–π—Ç–µ –∫—Ä–µ–¥–∏—Ç, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏ : ¬´–ö—Ä–µ–¥–∏—Ç¬ª',
                                disable_web_page_preview=True)
            result = QuestUser(user_id=user.id).update_progres(quest_ids=7, add_to_progresses=1)
            if result != '':
                await message.answer(text=result.format(user=user.link), disable_web_page_preview=True)
            return
        if spliy[1].lower() in ['–ø–æ–ª–æ–∂–∏—Ç—å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å']:
            if user.balance < arg:
                return await message.reply('üí∏ –ù–∞ —Ä—É–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫—É—é —Å—É–º–º—É –≤ –±–∞–Ω–∫!')
            user.editmany(balance=user.balance - arg, bank=user.bank + arg)
            await message.reply(f'‚úÖ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ –Ω–∞ +{to_str(arg)}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ: '
                                f'{to_str(user.bank)}')
            result = QuestUser(user_id=user.id).update_progres(quest_ids=6, add_to_progresses=arg)
            if result != '':
                await message.answer(text=result.format(user=user.link), disable_web_page_preview=True)
            # await writelog(message.from_user.id, f'–ë–∞–Ω–∫ +{to_str(arg)}')
            return
        elif spliy[1].lower() in ['—Å–Ω—è—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏']:
            if user.bank < arg:
                return await message.reply('üí≥ –í –±–∞–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞!')
            user.editmany(balance=user.balance + arg, bank=user.bank - arg)

            await message.reply(f'‚úÖ –í—ã —Å–Ω—è–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {to_str(arg)} –∏ —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö '
                                f'{to_str(user.balance)}')
            result = QuestUser(user_id=user.id).update_progres(quest_ids=5, add_to_progresses=arg)
            if result != '':
                await message.answer(text=result.format(user=user.link), disable_web_page_preview=True)
            # await writelog(message.from_user.id, f'–ë–∞–Ω–∫ -{to_str(arg)}')
            return
        elif spliy[1].lower() in ['–∫—Ä–µ–¥–∏—Ç', '–≤–∑—è—Ç—å', '–ø–æ–≥–∞—Å–∏—Ç—å']:
            return await credit_handler(message)
        else:
            return await message.reply(f'‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –≤–≤–µ–¥–∏—Ç–µ: <code>–±–∞–Ω–∫ (—Å–Ω—è—Ç—å\–ø–æ–ø–æ–ª–Ω–∏—Ç—å\–≤—ã–≤–µ—Å—Ç–∏) '
                                       f'(—Å—É–º–º–∞) </code>')


@flags.throttling_key('default')
async def credit_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        spliy = message.text.split()[1:]
        try:
            arg = abs(int(spliy[1].replace('$', '').replace('.', '').replace(',', '').replace(' ', '')))
            if arg <= 0:
                raise Exception(123)
        except:
            return await message.reply(f'‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –≤–≤–µ–¥–∏—Ç–µ: <code>–ö—Ä–µ–¥–∏—Ç (–≤–∑—è—Ç—å|–ø–æ–≥–∞—Å–∏—Ç—å) {{ '
                                       f'—Å—É–º–º–∞ }}</code>')

        user = User(user=message.from_user)
        if spliy[0] == '–≤–∑—è—Ç—å':
            credit_limit = sql.execute("SELECT credit_limit FROM other", commit=False, fetch=True)[0][0]
            if ((user.reg_date + datetime.timedelta(days=1)) - datetime.datetime.now()).total_seconds() > 1:
                time_tocredit = timetostr(int(((user.reg_date + datetime.timedelta(days=1) - datetime.datetime.now(

                )).total_seconds())))
                return await message.reply(
                    f'‚åö –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç—ã–≥—Ä–∞—Ç—å –µ—â—ë <code>{time_tocredit}</code> —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–∞—Ç—å '
                    f'–∫—Ä–µ–¥–∏—Ç!')

            elif user.credit >= credit_limit:
                return await message.reply(f'‚ùó –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞ {to_str(user.credit)}')
            elif arg > credit_limit or arg > credit_limit - user.credit:
                return await message.reply(f'‚ùó –°—É–º–º–∞ –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞'
                                           f' –¥–ª—è –≤–∑—è—Ç–∏—è –≤ –∫—Ä–µ–¥–∏—Ç: {to_str(credit_limit - user.credit)}')
            user.editmany(credit_time=time.time(),
                          bank=user.bank + arg,
                          credit=user.credit + arg)
            credit_percent = sql.execute("SELECT credit_percent FROM other", commit=False, fetch=True)[0][0]
            await message.reply(f'üíº –í—ã –≤–∑—è–ª–∏ –≤ –∫—Ä–µ–¥–∏—Ç {to_str(arg)} –ø–æ–¥ {credit_percent}%,'
                                f' –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ —É –≤–∞—Å –±—É–¥—É—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è –¥–µ–Ω—å–≥–∏'
                                f' —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –≤—ã –Ω–µ –≤—ã–ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç!')
            await writelog(message.from_user.id, f'–ö—Ä–µ–¥–∏—Ç +{to_str(arg)}')
            return
        else:
            if arg > user.credit:
                return await message.reply('‚ùó –°—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–≤–µ–ª–∏ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –±–æ–ª—å—à–µ —á–µ–º —É –≤–∞—Å –∫—Ä–µ–¥–∏—Ç.')
            elif arg > user.bank:
                return await message.reply('‚ùó –°—É–º–º–∞ –≤ –±–∞–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞!')
            user.editmany(credit=user.credit - arg,
                          credit_time=time.time() if user.credit - arg > 0 else None,
                          bank=user.bank - arg)
            await message.reply(f'‚úÖ –í—ã –ø–æ–≥–∞—Å–∏–ª–∏ –∫—Ä–µ–¥–∏—Ç –Ω–∞ -{to_str(arg)}, —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Å—á–µ—Ç—É: '
                                f'{to_str(user.credit)}')
            await writelog(message.from_user.id, f'–ö—Ä–µ–¥–∏—Ç -{to_str(arg)}')
            return
