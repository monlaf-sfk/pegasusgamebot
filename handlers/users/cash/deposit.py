import time

from aiogram import flags
from aiogram.types import Message

import config
from config import bot_name
from utils.logs import writelog
from utils.main.cash import to_str, get_cash
from utils.main.users import User
from filters.users import flood_handler


@flags.throttling_key('default')
async def deposit_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        spliy = message.text.split() if not bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[1:]
        user = User(user=message.from_user)
        try:
            arg = abs(get_cash(spliy[2].lower().replace('–≤—Å—ë', str(user.deposit)).replace('–≤—Å–µ', str(user.deposit)))) if \
            spliy[
                1].lower() in [
                '—Å–Ω—è—Ç—å',
                '–≤—ã–≤–µ—Å—Ç–∏',
                '–æ–±–Ω–∞–ª–∏—á–∏—Ç—å'] else abs(
                get_cash(
                    spliy[2].lower().replace('–≤—Å—ë', str(user.balance)).replace('–≤—Å–µ', str(user.balance))))
            if arg <= 0:
                raise Exception(123)
        except:
            return await message.reply(
                f'‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –≤–≤–µ–¥–∏—Ç–µ: <code>–¥–µ–ø–æ–∑–∏—Ç (—Å–Ω—è—Ç—å\–ø–æ–ø–æ–ª–Ω–∏—Ç—å\–≤—ã–≤–µ—Å—Ç–∏) {{ '
                f'—Å—É–º–º–∞ }}</code>')
        if spliy[1].lower() in ['–ø–æ–ª–æ–∂–∏—Ç—å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å']:
            if user.balance < arg:
                return await message.reply('üí∏ –ù–∞ —Ä—É–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫—É—é —Å—É–º–º—É –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç!')
            donate = 5_000_000
            if user.donate:
                if user.donate.id > 3:
                    user.editmany(balance=user.balance - arg, deposit=user.deposit + arg, deposit_date=time.time())
                    await writelog(message.from_user.id, f'–î–µ–ø–æ–∑–∏—Ç +{to_str(arg)}')
                    return await message.reply(
                        f'‚úÖ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ +{to_str(arg)}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ: 'f'{to_str(user.deposit)}')
                item = config.donates[user.donate.id]
                donate = item['limit_dep']

            if donate < user.deposit + arg:
                return await message.reply(
                    'üí∏ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –¥–µ–ø–æ–∑–∏—Ç–∞!\nüîé –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø–æ–∫—É–ø–∫–∏ –¥–æ–Ω–∞—Ç–∞ "–î–æ–Ω–∞—Ç"!')
            user.editmany(balance=user.balance - arg, deposit=user.deposit + arg, deposit_date=time.time())
            await message.reply(f'‚úÖ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ +{to_str(arg)}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ: '
                                f'{to_str(user.deposit)}')
            await writelog(message.from_user.id, f'–î–µ–ø–æ–∑–∏—Ç +{to_str(arg)}')
            return
        elif spliy[1].lower() in ['—Å–Ω—è—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏']:
            if user.deposit < arg:
                return await message.reply('üí∂ –ù–∞ –¥–µ–ø–æ–∑–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞!')
            user.editmany(balance=user.balance + arg, deposit=user.deposit - arg, deposit_date=time.time())
            await message.reply(f'‚úÖ –í—ã —Å–Ω—è–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {to_str(arg)} –∏ —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö '
                                f'{to_str(user.balance)}')
            await writelog(message.from_user.id, f'–î–µ–ø–æ–∑–∏—Ç -{to_str(arg)}')
            return
        return await message.reply(f'‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –≤–≤–µ–¥–∏—Ç–µ: <code>–¥–µ–ø–æ–∑–∏—Ç (—Å–Ω—è—Ç—å\–ø–æ–ø–æ–ª–Ω–∏—Ç—å\–≤—ã–≤–µ—Å—Ç–∏) '
                                   f'(—Å—É–º–º–∞)</code>')
