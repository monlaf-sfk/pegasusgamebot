import decimal
import random
import re
import time
from contextlib import suppress
from datetime import datetime

from aiogram import flags
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.callback_data import CallbackData

from aiogram.utils.keyboard import InlineKeyboardBuilder

from filters.users import flood_handler
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton

from loader import bot

from config import bot_name
from keyboard.main import check_ls_kb, settings_notifies_kb, marry_divorce_kb
from keyboard.marries import marrye_kb

from utils.main.cash import get_cash, to_str
from utils.main.db import sql
from utils.main.users import User, Settings
from utils.marries import Marry


class MarryRequest(CallbackData, prefix="marry"):
    user_id: int
    from_whom: int


@flags.throttling_key('default')
async def marries_request_handler(message: Message):
    user = User(id=message.from_user.id)
    try:
        marry = Marry(user_id=message.from_user.id)
    except:
        marry = None
    if marry:
        return await marry_handler(message)
    result = sql.execute(f"SELECT * FROM users_offer WHERE to_whom={message.from_user.id}",
                         fetch=True)
    arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[
        0].lower() else message.text.split()[2:]
    if len(arg) > 0 and arg[0].isdigit() and int(arg[0]) <= len(result):
        arg = int(arg[0]) - 1
        try:
            Marry(user_id=result[arg][1])
            return await message.reply(f'‚ùå –û—à–∏–±–∫–∞. –£ –Ω–µ–≥–æ\–µ–µ —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è!', disable_web_page_preview=True)
        except:
            Marry.create(user1=result[arg][0], user2=result[arg][1])
            await message.reply(f'{user.link}, –í—ã –≤—ã—à–ª–∏ (–∑–∞–º—É–∂\–ø–æ–∂–µ–Ω–∏–ª–∏—Å—å) –∑–∞ –∏–≥—Ä–æ–∫–∞ {User(id=result[arg][1]).link}',
                                disable_web_page_preview=True)
            sql.execute(
                f"DELETE FROM users_offer WHERE to_whom={result[arg][0]} or from_whom={result[arg][1]}"
                , commit=True)
            sql.execute(
                f"DELETE FROM users_offer WHERE to_whom={result[arg][1]} or from_whom={result[arg][0]}"
                , commit=True)
            settings = Settings(result[arg][1])
            if settings.marry_notifies:
                with suppress(TelegramBadRequest):
                    await bot.send_message(chat_id=result[arg][1],
                                           text=f'[–ë–†–ê–ö]\n'
                                                f'‚ñ∂Ô∏è –ò–≥—Ä–æ–∫  {user.link} –ø—Ä–∏–Ω—è–ª –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞! üëçüèª\n'
                                                'üíû –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞–∫–µ –≤–≤–µ–¥–∏—Ç–µ ¬´–ë—Ä–∞–∫¬ª\n'
                                                'üîî –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª\n',
                                           reply_markup=settings_notifies_kb(result[arg][1]),
                                           disable_web_page_preview=True)
            return
    if not result:
        return await message.reply(f'{user.link}, –í–∞–º –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞ üòî',
                                   disable_web_page_preview=True)
    text = f"{user.link}, –Ω–∞–π–¥–µ–Ω–æ {len(result)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—Ä–∞–∫–∞:\n"
    numbers_emoji = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']
    keyboard = InlineKeyboardBuilder()
    for index, (to_whom, from_whom) in enumerate(result, start=1):
        emoji = ''.join(numbers_emoji[int(i)] for i in str(index))
        text += f'<code>{emoji}</code> {User(id=from_whom).link}\n'
        keyboard.add(
            InlineKeyboardButton(text=f"{emoji}",
                                 callback_data=MarryRequest(from_whom=from_whom, user_id=to_whom).pack())
        )
    text += '\nüíû –î–ª—è —Å–æ–≥–ª–∞—Å–∏—è –≤–≤–µ–¥–∏—Ç–µ ¬´–ë—Ä–∞–∫–∏ [–Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]¬ª üëçüèª'
    return await message.reply(text, reply_markup=keyboard.adjust(2).as_markup(),
                               disable_web_page_preview=True)


@flags.throttling_key('default')
async def marry_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[2:]

        try:
            marry = Marry(user_id=message.from_user.id)
        except:
            marry = None

        user = User(id=message.from_user.id)

        if marry is not None:
            if marry.level is None or marry.level == 0:
                marry.level = 1

        if len(arg) == 0 or arg[0].lower() in ['–º–æ–π', '–º–æ—è', '–º–æ—ë']:
            if marry is None:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            user2 = User(id=marry.user2 if message.from_user.id == marry.user1 else marry.user1)
            user1 = User(id=marry.user2 if user2.id == marry.user1 else marry.user1)

            lol = datetime.now() - marry.reg_date
            xd = f'{lol.days} –¥–Ω.' if lol.days > 0 else f'{int(lol.total_seconds() // 3600)} —á–∞—Å.' \
                if lol.total_seconds() > 59 else f'{int(lol.seconds)} —Å–µ–∫.'
            text = f'üíç –í–∞—à–∞ —Å–µ–º—å—è ({user1.link} & {user2.link})\n' \
                   f'üë§ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{marry.name}</b>\n' \
                   f'üìÖ –î–∞—Ç–∞ –æ–±—Ä—É—á–µ–Ω–∏—è: {marry.reg_date} (<code>{xd}</code>)\n' \
                   f'üí∞ –ö–∞–ø–∏—Ç–∞–ª —Å–µ–º—å–∏: {to_str(marry.balance)}\n' \
                   f'üëë LVL: {marry.level}\n'
            return await message.reply(text=text, disable_web_page_preview=True,
                                       reply_markup=marrye_kb.as_markup())
        elif arg[0].lower() in ['—Å–æ–∑–¥–∞—Ç—å']:

            if marry and message.from_user.id in [marry.user1, marry.user2]:
                return await message.reply('‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è... –∞—è-—è–π –∏–∑–º–µ–Ω—â–∏–∫(—Ü–∞)!')
            try:
                user2 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                    username=arg[1].replace('@', ''))
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë—Ä–∞–∫ —Å–æ–∑–¥–∞—Ç—å *{—Å—Å—ã–ª–∫–∞}</code>')
            try:
                user1 = User(id=message.from_user.id)
                user12 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                    username=arg[1].replace('@', ''))
                if user1.id == user12.id:
                    return await message.reply('‚ùå –°–∞–º–æ–≤–ª—é–ª–µ–Ω–Ω—ã–π! –ù–µ–ª—å–∑—è —Å–∞–º —Å–æ–±–æ–π –∑–∞–≤–æ–¥–∏—Ç—å –±—Ä–∞–∫!')
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë—Ä–∞–∫ —Å–æ–∑–¥–∞—Ç—å *{—Å—Å—ã–ª–∫–∞}</code>')
            try:
                Marry(user_id=user2.id)
                return await message.reply(f'‚ùå –û—à–∏–±–∫–∞. –£ {user2.link} —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è!', disable_web_page_preview=True)
            except:
                to_whom = sql.execute(f"SELECT * FROM users_offer WHERE from_whom={user1.id} and to_whom={user2.id}",
                                      fetchone=True)
                from_whom = sql.execute(f"SELECT * FROM users_offer WHERE from_whom={user2.id} and to_whom={user1.id}",
                                        fetchone=True)
                if from_whom:
                    Marry.create(user1=user1.id, user2=user2.id)

                    await message.reply(
                        f'{user1.link}, –í—ã –≤—ã—à–ª–∏ (–∑–∞–º—É–∂\–ø–æ–∂–µ–Ω–∏–ª–∏—Å—å) –∑–∞ –∏–≥—Ä–æ–∫–∞ {user2.link}',
                        disable_web_page_preview=True)
                    sql.execute(
                        f"DELETE FROM users_offer WHERE to_whom={user1.id} or from_whom={user2.id}"
                        , commit=True)
                    sql.execute(
                        f"DELETE FROM users_offer WHERE to_whom={user2.id} or from_whom={user1.id}"
                        , commit=True)
                    settings = Settings(user2.id)
                    if settings.marry_notifies:
                        with suppress(TelegramBadRequest):
                            await bot.send_message(chat_id=user2.id,
                                                   text=f'[–ë–†–ê–ö]\n'
                                                        f'‚ñ∂Ô∏è –ò–≥—Ä–æ–∫  {user.link} –ø—Ä–∏–Ω—è–ª –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞! üëçüèª\n'
                                                        'üíû –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞–∫–µ –≤–≤–µ–¥–∏—Ç–µ ¬´–ë—Ä–∞–∫¬ª\n'
                                                        'üîî –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª\n',
                                                   reply_markup=settings_notifies_kb(user2.id),
                                                   disable_web_page_preview=True)
                    return
                if to_whom:
                    return await message.reply(
                        f'{user1.link}, –í—ã —É–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –∏–≥—Ä–æ–∫—É {user2.link} –≤—ã–π—Ç–∏ (–∑–∞–º—É–∂\–ø–æ–∂–µ–Ω–∏—Ç—å—Å—è) –∑–∞\–Ω–∞ –í–∞—Å üëçüèª',
                        disable_web_page_preview=True)
                if to_whom and len(to_whom) >= 8:
                    return await message.reply(
                        f'{user1.link},–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
                        disable_web_page_preview=True)

                data = [(user2.id, user1.id)]
                placeholders = ', '.join(['%s'] * len(data[0]))
                sql.cursor.execute(f"INSERT INTO users_offer VALUES ({placeholders})", data[0])
                sql.commit()
                settings = Settings(user2.id)
                if settings.marry_notifies:
                    with suppress(TelegramBadRequest):
                        await bot.send_message(chat_id=user2.id,
                                               text=f'[–ë–†–ê–ö]\n'
                                                    f'üíû –ò–≥—Ä–æ–∫ {user1.link} —Å–¥–µ–ª–∞–ª(a) –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞! \n'
                                                    f'‚ùï –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ë—Ä–∞–∫–∏¬ª\n'
                                                    'üîî –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª',
                                               reply_markup=settings_notifies_kb(user2.id),
                                               disable_web_page_preview=True)

            return await message.reply(
                f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ {user2.link} (–ø–æ–∂–µ–Ω–∏—Ç—å—Å—è\–≤—ã–π—Ç–∏ –∑–∞–º—É–∂)!\n\n–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –≤ –ª–∏—á–∫–µ –µ—Å–ª–∏ '
                '–æ–Ω(–∞) —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –ø–æ—ç—Ç–æ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-—Ç–æ –≤ –ª—Å @pegasusgame_bot',
                disable_web_page_preview=True, reply_markup=check_ls_kb.as_markup())



        elif arg[0].lower() in ['–≤—ã–π—Ç–∏', '—Ä–∞–∑–æ—Ä–≤–∞—Ç—å', '—É–¥–∞–ª–∏—Ç—å']:
            if marry is None:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            if message.from_user.id in [marry.user1, marry.user2]:
                await message.reply('‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ–∑—Ç–∏—Å—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n'
                                    '‚ñ∂ –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 —Å–µ–∫—É–Ω–¥',
                                    reply_markup=marry_divorce_kb(message.from_user.id, time.time()))

                return

        elif arg[0].lower() in ['—Å–Ω—è—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏']:
            if marry is None:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            summ = 0
            try:
                summ = get_cash(arg[1])
            except:
                pass

            if summ <= 0:
                return await message.reply('‚ùå –ú–∏–Ω–∏–º—É–º $1')
            if user.payban:
                return await message.reply(f'‚ùå {user.link},–ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã !',
                                           disable_web_page_preview=True)
            elif summ > marry.balance:
                return await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É —Å–µ–º—å–∏!')

            sql.executescript(f'UPDATE users SET balance = balance + {summ} WHERE id = {message.from_user.id};\n'
                              f'UPDATE marries SET balance = balance - {summ} WHERE (user1 = {message.from_user.id}) OR (user2 = {message.from_user.id})',
                              True, False)

            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {to_str(summ)} —Å –±—é–¥–∂–µ—Ç–∞ —Å–µ–º—å–∏!')
            settings = Settings(marry.user2 if message.from_user.id == marry.user1 else marry.user1)
            if settings.marry_notifies:
                with suppress(TelegramBadRequest):
                    await bot.send_message(settings.user_id,
                                           f'[–ë–†–ê–ö]\n‚ùï {user.link} —Å–Ω—è–ª —Å –±—Ä–∞–∫–∞ {to_str(summ)}',
                                           disable_web_page_preview=True)
            return
        elif arg[0].lower() in ['–ø–æ–ª–æ–∂–∏—Ç—å', '–≤–ª–æ–∂–∏—Ç—å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å']:
            if marry is None:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            summ = 0
            try:
                summ = get_cash(arg[1])
            except:
                pass

            if summ <= 0:
                return await message.reply('‚ùå –ú–∏–Ω–∏–º—É–º $1')

            elif summ > user.balance:
                return await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä—É–∫–∞—Ö!')
            if user.payban:
                return await message.reply(f'‚ùå {user.link},–ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã !',
                                           disable_web_page_preview=True)
            sql.executescript(f'UPDATE users SET balance = balance - {summ} WHERE id = {message.from_user.id};\n'
                              f'UPDATE marries SET balance = balance + {summ} WHERE (user1 = {message.from_user.id}) OR (user2 = {message.from_user.id})',
                              True, False)

            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –Ω–∞ +{to_str(summ)}')

            settings = Settings(marry.user2 if message.from_user.id == marry.user1 else marry.user1)
            if settings.marry_notifies:
                with suppress(TelegramBadRequest):
                    await bot.send_message(settings.user_id,
                                           f'[–ë–†–ê–ö]\n‚ùï {user.link} –ø–æ–ø–æ–ª–Ω–∏–ª –±—Ä–∞–∫ –Ω–∞ {to_str(summ)}',
                                           disable_web_page_preview=True)
            return
        elif arg[0].lower() in ['–Ω–∞–≥—Ä–∞–¥–∞', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', '–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ']:
            lol = datetime.now() - marry.reg_date
            if lol.total_seconds() < 7200:
                xd = f'{round((7200 - lol.total_seconds()) / 60)} –º–∏–Ω.'
                return await message.reply(f'‚åö –ù–∞–≥—Ä–∞–¥—É —Å –±—Ä–∞–∫–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ : {xd}')
            if marry.last is not None and (decimal.Decimal(time.time()) - marry.last) < 3600:
                return await message.reply('‚åö –í—ã –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É')

            marry.editmany(last=time.time(),
                           balance=marry.balance + 10000 * marry.level)
            await message.reply(f'üéÑ –í –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{to_str(10000 * marry.level)}')

            return
        elif arg[0].lower() in ['—Å–µ–∫—Å', '—Ç—Ä–∞—Ö–∞—Ç—å', '—Ç—Ä–∞—Ö–∞—Ç—å—Å—è', '—Ç—Ä–∞—Ö–∞–Ω—å–µ']:
            if not marry:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            lol = datetime.now() - marry.reg_date
            if lol.total_seconds() < 7200:
                xd = f'{round((7200 - lol.total_seconds()) / 60)} –º–∏–Ω.'
                return await message.reply(f'‚åö –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ,–≤—ã –∂–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è : {xd}')
            if marry.last_sex is not None and (decimal.Decimal(time.time()) - marry.last_sex) < 3600:
                return await message.reply('‚åö –í—ã –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —ç—Ç–∏–º –¥–µ–ª–æ–º!')

            summ = random.randint(5000, 25000 * marry.level)

            marry.editmany(last_sex=time.time(),
                           balance=marry.balance + summ)

            user2 = User(id=marry.user2 if message.from_user.id == marry.user1 else marry.user1)

            await message.reply(f'üéÑ –í—ã –∑–∞–Ω—è–ª–∏—Å—å —Å—ç–∫—Å–æ–º —Å {user2.link} –∏ –≤ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ '
                                f'+{to_str(summ)}', disable_web_page_preview=True)

            return
        elif arg[0].lower() in ['—É–ª—É—á—à', '—É–ª—É—á—à–µ–Ω–∏–µ', '—É–ª—É—á—à–∏—Ç—å']:
            if not marry:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')

            price = 1000000 * (marry.level + 1)
            if user.balance < price:
                return await message.reply(
                    f'üí≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ–º—å–∏. –ù—É–∂–Ω–æ: {to_str(price)}')

            query = f'UPDATE users SET balance = balance - {price} WHERE id = {message.from_user.id};\n' \
                    f'UPDATE marries SET level = level + 1 WHERE (user1 = {message.from_user.id}) OR (user2 = {message.from_user.id});'
            sql.executescript(query=query, commit=True, fetch=False)

            return await message.reply(f'‚úÖ –í—ã —É–ª—É—á—à–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–µ–º—å–∏ –Ω–∞ +1, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {marry.level + 1}')
        elif arg[0].lower() in ['–Ω–∞–∑–≤–∞—Ç—å', '–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', '–Ω–∏–∫', '–Ω–µ–π–º',
                                '–Ω–∞–∑–≤–∞–Ω–∏–µ']:
            if not marry:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')

            if marry.level < 3:
                return await message.reply('üëë –ù—É–∂–µ–Ω 4 –ª–≤–ª —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏!')

            try:
                name = re.sub('''[@"'%<>üíéüë®‚Äçüî¨üåü‚ö°üëÆ‚Äç‚ôÇ‚û™üëæü•≤‚õèüòéüëëüíñüêüüçÜüòàüèøüê•üë∂üèøüá∑üá∫üá∫üá¶]''', '', arg[1])
            except:
                return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë—Ä–∞–∫ –Ω–∞–∑–≤–∞—Ç—å {–Ω–∞–∑–≤–∞–Ω–∏–µ}</code>')
            if len(name) < 4 or len(name) > 16:
                return await message.reply('‚ùå –î–ª–∏–Ω–∞ –±–æ–ª—å—à–µ 16 –∏–ª–∏ –º–µ–Ω—å—à–µ 4. –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã.')

            marry.edit('name', name)

            return await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –Ω–∞: <b>{name}</b>')

        else:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–º–æ—â—å —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!')


@flags.throttling_key('default')
async def marry_call_handler(call: CallbackQuery, callback_data: MarryRequest):
    try:
        marry = Marry(user_id=call.from_user.id)
    except:
        marry = None
    if marry:
        return await call.message.edit_text(f'‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è!', disable_web_page_preview=True)
    if callback_data.user_id != call.from_user.id:
        return await call.answer(f'ü§® –£–±–µ—Ä–∏ —Å–≤–æ–∏ —à–∞–ª–æ–≤–ª–∏–≤—ã–µ —Ä—É–∫–∏!')
    try:
        Marry(user_id=callback_data.from_whom)
        return await call.message.edit_text(f'‚ùå –û—à–∏–±–∫–∞. –£ –Ω–µ–≥–æ\–µ–µ —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è!', disable_web_page_preview=True)
    except:
        Marry.create(user1=callback_data.from_whom, user2=callback_data.user_id)
        user = User(id=callback_data.user_id)
        await call.message.edit_text(
            f'{user.link}, –í—ã –≤—ã—à–ª–∏ (–∑–∞–º—É–∂\–ø–æ–∂–µ–Ω–∏–ª–∏—Å—å) –∑–∞ –∏–≥—Ä–æ–∫–∞ {User(id=callback_data.from_whom).link}',
            disable_web_page_preview=True)
        sql.execute(
            f"DELETE FROM users_offer WHERE to_whom={callback_data.from_whom} or from_whom={callback_data.user_id}"
            , commit=True)
        sql.execute(
            f"DELETE FROM users_offer WHERE to_whom={callback_data.user_id} or from_whom={callback_data.from_whom}"
            , commit=True)
        settings = Settings(callback_data.from_whom)
        if settings.marry_notifies:
            with suppress(TelegramBadRequest):
                await bot.send_message(chat_id=callback_data.from_whom,
                                       text=f'[–ë–†–ê–ö]\n'
                                            f'‚ñ∂Ô∏è –ò–≥—Ä–æ–∫  {user.link} –ø—Ä–∏–Ω—è–ª –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞! üëçüèª\n'
                                            'üíû –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞–∫–µ –≤–≤–µ–¥–∏—Ç–µ ¬´–ë—Ä–∞–∫¬ª\n'
                                            'üîî –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª\n',
                                       reply_markup=settings_notifies_kb(callback_data.from_whom),
                                       disable_web_page_preview=True)
        return


@flags.throttling_key('default')
async def marry_divorce_handler(call: CallbackQuery):
    divorce, user_id, time_call = call.data.split(":")
    user_id = int(user_id)

    if user_id != call.from_user.id:
        return await call.answer(f'ü§® –£–±–µ—Ä–∏ —Å–≤–æ–∏ —à–∞–ª–æ–≤–ª–∏–≤—ã–µ —Ä—É–∫–∏!')
    if time.time() - float(time_call) > 30:
        with suppress(TelegramBadRequest):
            await call.answer(f'‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫', show_alert=True)
        return
    try:
        marry = Marry(user_id=call.from_user.id)
    except:
        marry = None
    if marry is None:
        with suppress(TelegramBadRequest):
            call.message.edit_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
        return
    with suppress(TelegramBadRequest):
        user2 = User(id=marry.user2 if call.from_user.id == marry.user1 else marry.user1)
        user1 = User(id=marry.user2 if user2.id == marry.user1 else marry.user1)
        user1.edit('balance', user1.balance + round(marry.balance / 2))
        user2.edit('balance', user2.balance + round(marry.balance / 2))
        await call.message.edit_text(f'{user1.link}, –í—ã —Ä–∞–∑–≤–µ–ª–∏—Å—å —Å –∏–≥—Ä–æ–∫–æ–º {user2.link} üòü\n'
                                     f'üí∏ –û–±—â–∏–π —Å—á—ë—Ç –±—ã–ª –ø–æ–¥–µ–ª—ë–Ω –ø–æ—Ä–æ–≤–Ω—É: +{to_str(round(marry.balance / 2))}',
                                     disable_web_page_preview=True)
        marry.delete()
    settings = Settings(user2.id)
    if settings.marry_notifies:
        with suppress(TelegramBadRequest):
            await bot.send_message(chat_id=user2.id,
                                   text=f'[–ë–†–ê–ö]\n'
                                        f'üíî –í–∞—à–∞ (–∂–µ–Ω–∞\–º—É–∂) ¬´{user1.link}¬ª —Ä–µ—à–∏–ª(–∞) —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å –í–∞–º–∏ ‚òπ\n'
                                        f'üí∏ –û–±—â–∏–π —Å—á—ë—Ç –±—ã–ª –ø–æ–¥–µ–ª–µ–Ω –ø–æ—Ä–æ–≤–Ω—É: +{to_str(round(marry.balance / 2))}\n'
                                        'üîî –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª\n',
                                   reply_markup=settings_notifies_kb(user2.id),
                                   disable_web_page_preview=True)
