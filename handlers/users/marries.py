import decimal
import random
import re
import time
from contextlib import suppress
from datetime import datetime

from aiogram import flags
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

from filters.users import flood_handler
from aiogram.types import Message, CallbackQuery

from loader import bot

from config import bot_name
from keyboard.main import marry_kb, check_ls_kb
from keyboard.marries import marrye_kb
from utils.logs import writelog
from utils.main.cash import get_cash, to_str
from utils.main.db import sql
from utils.main.users import User
from utils.marries import Marry


@flags.throttling_key('default')
async def marry_handler(message: Message):
    flood = await flood_handler(message)
    if flood:
        arg = message.text.split()[1:] if not bot_name.lower() in message.text.split()[
            0].lower() else message.text.split()[2:]

        try:
            marry = Marry(user_id=message.from_user.id)
        except:
            marry = None

        user = User(id=message.from_user.id)

        if marry is not None:
            if marry.level is None or marry.level == 0:
                marry.level = 1

        if len(arg) == 0 or arg[0].lower() in ['–º–æ–π', '–º–æ—è', '–º–æ—ë']:
            if marry is None:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            user2 = User(id=marry.user2 if message.from_user.id == marry.user1 else marry.user1)
            user1 = User(id=marry.user2 if user2.id == marry.user1 else marry.user1)

            lol = datetime.now() - marry.reg_date
            xd = f'{lol.days} –¥–Ω.' if lol.days > 0 else f'{int(lol.total_seconds() // 3600)} —á–∞—Å.' \
                if lol.total_seconds() > 59 else f'{int(lol.seconds)} —Å–µ–∫.'
            text = f'üíç –í–∞—à–∞ —Å–µ–º—å—è ({user1.link} & {user2.link})\n' \
                   f'üë§ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{marry.name}</b>\n' \
                   f'üìÖ –î–∞—Ç–∞ –æ–±—Ä—É—á–µ–Ω–∏—è: {marry.reg_date} (<code>{xd}</code>)\n' \
                   f'üí∞ –ö–∞–ø–∏—Ç–∞–ª —Å–µ–º—å–∏: {to_str(marry.balance)}\n' \
                   f'üëë LVL: {marry.level}\n'
            return await message.reply(text=text, disable_web_page_preview=True,
                                       reply_markup=marrye_kb.as_markup())
        elif arg[0].lower() in ['—Å–æ–∑–¥–∞—Ç—å']:

            if marry and message.from_user.id in [marry.user1, marry.user2]:
                return await message.reply('‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è... –∞—è-—è–π –∏–∑–º–µ–Ω—â–∏–∫(—Ü–∞)!')
            try:
                user2 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                    username=arg[1].replace('@', ''))
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë—Ä–∞–∫ —Å–æ–∑–¥–∞—Ç—å *{—Å—Å—ã–ª–∫–∞}</code>')
            try:
                user1 = User(id=message.from_user.id)
                user12 = User(id=message.reply_to_message.from_user.id) if message.reply_to_message else User(
                    username=arg[1].replace('@', ''))
                if user1.id == user12.id:
                    return await message.reply('‚ùå –°–∞–º–æ–≤–ª—é–ª–µ–Ω–Ω—ã–π! –ù–µ–ª—å–∑—è —Å–∞–º —Å–æ–±–æ–π –∑–∞–≤–æ–¥–∏—Ç—å –±—Ä–∞–∫!')
            except:
                return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë—Ä–∞–∫ —Å–æ–∑–¥–∞—Ç—å *{—Å—Å—ã–ª–∫–∞}</code>')
            try:
                Marry(user_id=user2.id)
                return await message.reply(f'‚ùå –û—à–∏–±–∫–∞. –£ {user2.link} —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è!', disable_web_page_preview=True)
            except:
                try:
                    await bot.send_message(chat_id=user2.id,
                                           text=f'[üíç] {user.link} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –∂–µ–Ω–∏—Ç—å—Å—è!',
                                           reply_markup=marry_kb(user.id, user2.id), disable_web_page_preview=True)
                except TelegramForbiddenError:
                    return await message.reply(f'‚ùå {user2.link} –Ω–∏—Ä–∞–∑—É –Ω–µ –ø–∏—Å–∞–ª –≤ –ª—Å –±–æ—Ç—É –∏ —è –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –º–æ–≥—É '
                                               '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–∞–¥—å–±—É!', disable_web_page_preview=True)
            return await message.reply(
                f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ {user2.link} –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è!\n\n–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –≤ –ª–∏—á–∫–µ –µ—Å–ª–∏ '
                '–æ–Ω(–∞) —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –ø–æ—ç—Ç–æ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-—Ç–æ –≤ –ª—Å @pegasusgame_bot',
                disable_web_page_preview=True, reply_markup=check_ls_kb.as_markup())

            # await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—é—Ç–∏–ª–∏ {user2.link}', disable_web_page_preview=True)
            # await writelog(message.from_user.id, f'–ü—Ä–∏—é—á–µ–Ω–∏–µ {user2.link}')
            # return

        elif arg[0].lower() in ['–≤—ã–π—Ç–∏', '—Ä–∞–∑–æ—Ä–≤–∞—Ç—å', '—É–¥–∞–ª–∏—Ç—å']:
            if marry is None:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            if message.from_user.id in [marry.user1, marry.user2]:
                marry.delete()
                await message.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–µ–º—å—é! –ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å :(')

                return

        elif arg[0].lower() in ['—Å–Ω—è—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏']:
            if marry is None:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            summ = 0
            try:
                summ = get_cash(arg[1])
            except:
                pass

            if summ <= 0:
                return await message.reply('‚ùå –ú–∏–Ω–∏–º—É–º $1')
            if user.payban:
                return await message.reply(f'‚ùå {user.link},–ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã !',
                                           disable_web_page_preview=True)
            elif summ > marry.balance:
                return await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É —Å–µ–º—å–∏!')

            sql.executescript(f'UPDATE users SET balance = balance + {summ} WHERE id = {message.from_user.id};\n'
                              f'UPDATE marries SET balance = balance - {summ} WHERE (user1 = {message.from_user.id}) OR (user2 = {message.from_user.id})',
                              True, False)

            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {to_str(summ)} —Å –±—é–¥–∂–µ—Ç–∞ —Å–µ–º—å–∏!')
            await writelog(message.from_user.id, f'–°–Ω—è—Ç–∏–µ {to_str(summ)} —Å –±—é–¥–∂–µ—Ç–∞ —Å–µ–º—å–∏')
            return
        elif arg[0].lower() in ['–ø–æ–ª–æ–∂–∏—Ç—å', '–≤–ª–æ–∂–∏—Ç—å', '–ø–æ–ø–æ–ª–Ω–∏—Ç—å']:
            if marry is None:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            summ = 0
            try:
                summ = get_cash(arg[1])
            except:
                pass

            if summ <= 0:
                return await message.reply('‚ùå –ú–∏–Ω–∏–º—É–º $1')

            elif summ > user.balance:
                return await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä—É–∫–∞—Ö!')
            if user.payban:
                return await message.reply(f'‚ùå {user.link},–ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã !',
                                           disable_web_page_preview=True)
            sql.executescript(f'UPDATE users SET balance = balance - {summ} WHERE id = {message.from_user.id};\n'
                              f'UPDATE marries SET balance = balance + {summ} WHERE (user1 = {message.from_user.id}) OR (user2 = {message.from_user.id})',
                              True, False)

            await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –Ω–∞ +{to_str(summ)}')
            await writelog(message.from_user.id, f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {to_str(summ)} –≤ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏')
            return
        elif arg[0].lower() in ['–Ω–∞–≥—Ä–∞–¥–∞', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', '–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ']:
            lol = datetime.now() - marry.reg_date
            if lol.total_seconds() < 7200:
                xd = f'{round((7200 - lol.total_seconds()) / 60)} –º–∏–Ω.'
                return await message.reply(f'‚åö –ù–∞–≥—Ä–∞–¥—É —Å –±—Ä–∞–∫–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ : {xd}')
            if marry.last is not None and (decimal.Decimal(time.time()) - marry.last) < 3600:
                return await message.reply('‚åö –í—ã –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É')

            marry.editmany(last=time.time(),
                           balance=marry.balance + 10000 * marry.level)
            await message.reply(f'üéÑ –í –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{to_str(10000 * marry.level)}')

            return
        elif arg[0].lower() in ['—Å–µ–∫—Å', '—Ç—Ä–∞—Ö–∞—Ç—å', '—Ç—Ä–∞—Ö–∞—Ç—å—Å—è', '—Ç—Ä–∞—Ö–∞–Ω—å–µ']:
            if not marry:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')
            lol = datetime.now() - marry.reg_date
            if lol.total_seconds() < 7200:
                xd = f'{round((7200 - lol.total_seconds()) / 60)} –º–∏–Ω.'
                return await message.reply(f'‚åö –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ,–≤—ã –∂–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è : {xd}')
            if marry.last_sex is not None and (decimal.Decimal(time.time()) - marry.last_sex) < 3600:
                return await message.reply('‚åö –í—ã –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —ç—Ç–∏–º –¥–µ–ª–æ–º!')

            summ = random.randint(5000, 25000 * marry.level)

            marry.editmany(last_sex=time.time(),
                           balance=marry.balance + summ)

            user2 = User(id=marry.user2 if message.from_user.id == marry.user1 else marry.user1)

            await message.reply(f'üéÑ –í—ã –∑–∞–Ω—è–ª–∏—Å—å —Å—ç–∫—Å–æ–º —Å {user2.link} –∏ –≤ –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ '
                                f'+{to_str(summ)}', disable_web_page_preview=True)

            return
        elif arg[0].lower() in ['—É–ª—É—á—à', '—É–ª—É—á—à–µ–Ω–∏–µ', '—É–ª—É—á—à–∏—Ç—å']:
            if not marry:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')

            price = 1000000 * (marry.level + 1)
            if user.balance < price:
                return await message.reply(
                    f'üí≤ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä—É–∫–∞—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ–º—å–∏. –ù—É–∂–Ω–æ: {to_str(price)}')

            query = f'UPDATE users SET balance = balance - {price} WHERE id = {message.from_user.id};\n' \
                    f'UPDATE marries SET level = level + 1 WHERE (user1 = {message.from_user.id}) OR (user2 = {message.from_user.id});'
            sql.executescript(query=query, commit=True, fetch=False)

            return await message.reply(f'‚úÖ –í—ã —É–ª—É—á—à–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–µ–º—å–∏ –Ω–∞ +1, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {marry.level + 1}')
        elif arg[0].lower() in ['–Ω–∞–∑–≤–∞—Ç—å', '–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', '–Ω–∏–∫', '–Ω–µ–π–º',
                                '–Ω–∞–∑–≤–∞–Ω–∏–µ']:
            if not marry:
                return await message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏ :(')

            if marry.level < 3:
                return await message.reply('üëë –ù—É–∂–µ–Ω 4 –ª–≤–ª —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏!')

            try:
                name = re.sub('''[@"'%<>üíéüë®‚Äçüî¨üåü‚ö°üëÆ‚Äç‚ôÇ‚û™üëæü•≤‚õèüòéüëëüíñüêüüçÜüòàüèøüê•üë∂üèøüá∑üá∫üá∫üá¶]''', '', arg[1])
            except:
                return await message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ë—Ä–∞–∫ –Ω–∞–∑–≤–∞—Ç—å {–Ω–∞–∑–≤–∞–Ω–∏–µ}</code>')
            if len(name) < 4 or len(name) > 16:
                return await message.reply('‚ùå –î–ª–∏–Ω–∞ –±–æ–ª—å—à–µ 16 –∏–ª–∏ –º–µ–Ω—å—à–µ 4. –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã.')

            marry.edit('name', name)

            return await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –Ω–∞: <b>{name}</b>')

        else:
            return await message.reply('‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–º–æ—â—å —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!')


@flags.throttling_key('default')
async def marry_call_handler(call: CallbackQuery):
    user1 = int(call.data.split('_')[1])
    if str(call.data.split('_')[0]) == 'maccept':
        try:
            Marry(user_id=user1)
            await call.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±—Ä–∞–∫–µ')
            return await call.message.delete()
        except:
            pass
        try:
            Marry(user_id=call.from_user.id)
            await call.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±—Ä–∞–∫–µ')
            return await call.message.delete()
        except:
            pass
        try:
            await bot.send_message(chat_id=user1,
                                   text=f'–£—Ä–∞, –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –∫–æ—Ç–æ—Ä–æ–π'
                                        f' –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏–Ω—è–ª–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–∞–¥—å–±—É!')
        except:
            pass
        Marry.create(user1=user1, user2=call.from_user.id)
        await call.answer('–ë—Ä–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')

        with suppress(TelegramBadRequest):
            await call.message.delete()
        return
    else:
        await bot.send_message(chat_id=user1,
                               text=f'–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –≤–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏')
        with suppress(TelegramBadRequest):
            return await call.message.delete()
