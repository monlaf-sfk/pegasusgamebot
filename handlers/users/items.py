from contextlib import suppress

from aiogram import flags, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from psycopg2._json import Json

from keyboard.main import inv_kb, settings_notifies_kb

from utils.main.cash import to_str
from utils.main.db import sql
from utils.main.users import User, Settings
from filters.users import flood_handler
from utils.items.work_items import works_items, fetch_all_workitems_counts, set_workitems_count, get_workitems_count


@flags.throttling_key('default')
async def item_handler(message: Message, bot: Bot):
    flood = await flood_handler(message)
    if flood:
        arg = message.text.split()[1:] if message.text.split()[0].lower() != '–ø—Ä–æ–¥–∞—Ç—å' else message.text.split()
        if len(arg) > 0 and arg[0].lower() in ['–∏–Ω–≤', '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å']:
            arg = arg[1:]

        user = User(user=message.from_user)
        user_work_counts = fetch_all_workitems_counts(user.id)
        if len(arg) == 0 or arg[0].lower() == '–º–æ–π':
            text = f'üéí {user.link}, –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n'
            for index, item in enumerate(works_items.values(), start=1):
                count = user_work_counts.get(index, 0)
                if count > 0:
                    text += f'<code>{index}</code> ‚Ä¢ <b>{item["name"]} {item["emoji"]} (<code>x{count}</code>)</b>\n'

            if '‚Ä¢' not in text:
                text += "‚ûñ –ü—É—Å—Ç–æ–π"
            return await message.reply(text=text, reply_markup=inv_kb.as_markup(), disable_web_page_preview=True)
        elif arg[0].lower() in ['–¥–∞—Ç—å', '–ø–µ—Ä–µ–¥–∞—Ç—å'] and len(arg) >= 3:
            if not arg[1].isdigit():
                return await message.reply(f'‚ùå {user.link}, –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞!',
                                           disable_web_page_preview=True)
            if arg[2].isdigit():
                if not message.reply_to_message and (len(arg) < 4 or not '@' in arg[3]):
                    return await message.reply(
                        f'‚ùå {user.link}, –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º—É '
                        '—Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å!', disable_web_page_preview=True)
                elif not message.reply_to_message:
                    try:
                        to_user = User(username=arg[3].replace('@', ''))
                    except:
                        return await message.reply(f'‚ùå {user.link}, –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º!', disable_web_page_preview=True)
                else:
                    to_user = User(user=message.reply_to_message.from_user)
                count = int(arg[2])
            else:
                return await message.reply(f'‚ùå {user.link}, –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞!', disable_web_page_preview=True)
            if user.id == to_user.id:
                return await message.reply(f'‚ùå {user.link}, –°–∞–º–æ–º—É —Å–µ–±–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç!',
                                           disable_web_page_preview=True)

            if count <= 0 or count > user_work_counts.get(int(arg[1]), 0):
                return await message.reply(f'‚ùå {user.link}, –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!',
                                           disable_web_page_preview=True)

            item_s = works_items[int(arg[1])]
            count_user = user_work_counts.get(int(arg[1]), 0) - count
            set_workitems_count(int(arg[1]), user.id, count_user)

            count_user2 = get_workitems_count(int(arg[1]), to_user.id)

            set_workitems_count(int(arg[1]), to_user.id, count_user2 + count if count_user2 else count)

            await message.reply(f'‚úÖ {user.link}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ (<code>x{count}</code>) <b>{item_s["name"]}'
                                f' {item_s["emoji"]}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user.link}', disable_web_page_preview=True)
            settings = Settings(user.id)
            if settings.pay_notifies:
                with suppress(TelegramBadRequest):
                    await bot.send_message(to_user.id,
                                           f'[–ü–ï–†–ï–í–û–î]\n‚ùï –í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ (<code>x{count}</code>) <b>{item_s["name"]}'
                                           f' {item_s["emoji"]}</b> –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.link}\n'
                                           f'üîî –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª',
                                           disable_web_page_preview=True, reply_markup=settings_notifies_kb(user.id))
            return

        elif arg[0].lower() == '–ø—Ä–æ–¥–∞—Ç—å' and len(arg) >= 2:
            if not arg[1].isdigit() and arg[1].lower() not in ['–≤—Å—ë', '–≤—Å–µ']:
                return await message.reply(f'‚ùå {user.link}, –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞!',
                                           disable_web_page_preview=True)
            count = 1

            if arg[1].lower() not in ['–≤—Å—ë', '–≤—Å–µ']:
                if len(arg) >= 3:
                    try:
                        if arg[2].lower() in ['–≤—Å—ë', '–≤—Å–µ']:
                            count = user_work_counts.get(int(arg[1]), 0)
                        else:
                            count = int(arg[2])
                    except:
                        return await message.reply(f'‚ùå {user.link}, –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!',
                                                   disable_web_page_preview=True)

                if count < 0 or count > user_work_counts.get(int(arg[1]), 0):
                    return await message.reply(f'‚ùå {user.link}, –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!',
                                               disable_web_page_preview=True)
                item_s = works_items[int(arg[1])]
                count_user = user_work_counts.get(int(arg[1]), 0) - count
                set_workitems_count(arg[1], user.id, count_user)

                user.edit('balance', user.balance + item_s["sell_price"] * count)
                await message.reply(f'‚úÖ {user.link}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç <b>{item_s["name"]}'
                                    f' {item_s["emoji"]}</b> (<code>x{count}'
                                    f'</code>) –∑–∞ {to_str(item_s["sell_price"] * count)}',
                                    disable_web_page_preview=True)
                return
            else:
                inven = []
                for index, item in enumerate(works_items.values(), start=1):
                    count = user_work_counts.get(index, 0)
                    if count > 0:
                        inven.append(item["sell_price"] * count)
                price = sum(inven)
                if price == 0:
                    return await message.reply(f'üéÑ {user.link}, –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å!',
                                               disable_web_page_preview=True)

                sql.execute(f"UPDATE user_work_items SET count = 0 WHERE user_id={user.id}", commit=True)
                user.editmany(balance=user.balance + price)
                await message.reply(
                    f'‚úÖ {user.link}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –ø–æ–ª—É—á–∏–ª–∏ +{to_str(price)}',
                    disable_web_page_preview=True)
                return
        else:
            return await message.reply(
                f'‚ùå {user.link},  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ò–Ω–≤ (–ø—Ä–æ–¥–∞—Ç—å|–º–æ–∏|–¥–∞—Ç—å) (–Ω–æ–º–µ—Ä) (–∫–æ–ª-–≤–æ) (username\id)</code>',
                disable_web_page_preview=True)
