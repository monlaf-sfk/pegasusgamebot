import io
import re

import time
from contextlib import suppress

import aiohttp
import pandas as pd
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, FSInputFile, BufferedInputFile
from aiogram import Router, F, flags
from matplotlib import pyplot as plt
from scipy.signal import savgol_filter

from filters.triggers import Trigger
from handlers.admins.pyrogram import get_user_id
from utils.main.bitcoin import to_usd
from utils.main.cash import to_str

from utils.main.db import sql, timetostr
from config import owner_id
from filters.admin import IsOwner

from keyboard.main import remove
from aiogram.filters import Command

from utils.main.euro import uah_to_usd, euro_to_usd
from utils.main.users import User

from fake_useragent import UserAgent

router = Router()


async def get_anek():
    ua = UserAgent()
    user_agent = ua.random
    headers = {
        'User-Agent': user_agent
    }
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.get('https://www.anekdot.ru/random/anekdot/') as response:
            body = await response.text()
            res = re.search(r'<div class="text">([^<]+)</div>', body, re.IGNORECASE)
            if res:
                anek = res.group(1).replace('&quot;', '"').replace('<br>', '\n').strip()
                return anek
            return None


@router.message(Trigger(["–∞–Ω–µ–∫–¥–æ—Ç"]))
async def send_anek(message: Message):
    anek = await get_anek()
    user = User(user=message.from_user)
    if anek:

        await message.reply(f'{user.link}, –∞–Ω–µ–∫–¥–æ—Ç:\n{anek}', disable_web_page_preview=True)
    else:
        await message.reply(f'{user.link}, –∏–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                            disable_web_page_preview=True)


def uah_btc_euro_iad():
    data_uah = pd.read_csv('assets/uah.price', sep=' ', header=None, names=['Date', 'Time', 'UAH_Price'])
    data_btc = pd.read_csv('assets/btc.price', sep=' ', header=None, names=['Date', 'Time', 'BTC_Price'])
    data_euro = pd.read_csv('assets/euro.price', sep=' ', header=None, names=['Date', 'Time', 'Euro_Price'])

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    for data in [data_uah, data_btc, data_euro]:
        data['Date'] = pd.to_datetime(data['Date'], format='%Y-%m-%d')
        data['Time'] = pd.to_datetime(data['Time'], format='%H:%M:%S').dt.time

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ 'Date' –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        data['Date'] = pd.to_datetime(data['Date'].astype(str) + ' ' + data['Time'].astype(str))

    end_date = data_uah['Date'].max()
    start_date = end_date - pd.DateOffset(days=5)

    filtered_data_uah = data_uah[(data_uah['Date'] >= start_date) & (data_uah['Date'] <= end_date)]
    filtered_data_btc = data_btc[(data_btc['Date'] >= start_date) & (data_btc['Date'] <= end_date)]
    filtered_data_euro = data_euro[(data_euro['Date'] >= start_date) & (data_euro['Date'] <= end_date)]

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    window_size = 5  # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
    poly_order = 2  # –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–∏–Ω–æ–º–∞ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ

    smoothed_uah = savgol_filter(filtered_data_uah['UAH_Price'], window_size, poly_order)
    smoothed_btc = savgol_filter(filtered_data_btc['BTC_Price'], window_size, poly_order)
    smoothed_euro = savgol_filter(filtered_data_euro['Euro_Price'], window_size, poly_order)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    dark_gray = '#333333'  # Dark gray background color
    plt.figure(figsize=(16, 11), facecolor=dark_gray, dpi=80)

    # Plot smoothed UAH data
    plt.plot(filtered_data_uah['Date'], smoothed_uah, marker='', linestyle='-', color='b',
             label='–°–≥–ª–∞–∂–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ UAH')

    # Plot smoothed Bitcoin data
    plt.plot(filtered_data_btc['Date'], smoothed_btc, marker='', linestyle='-', color='g',
             label='–°–≥–ª–∞–∂–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ BTC')

    # Plot smoothed Euro data
    plt.plot(filtered_data_euro['Date'], smoothed_euro, marker='', linestyle='-', color='r',
             label='–°–≥–ª–∞–∂–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ Euro')
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img_byte_array = io.BytesIO()
    plt.xlabel('–î–∞—Ç–∞', color='white', fontsize=25)
    plt.ylabel('–¶–µ–Ω–∞', color='white', fontsize=25)
    plt.title('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω', color='white', fontsize=30)
    plt.xticks(rotation=45, color='white', fontsize=12)
    plt.yticks(color='white', fontsize=12)
    plt.legend()
    plt.grid(True, color=dark_gray, linestyle='--', linewidth=0.5, alpha=0.7)
    plt.gca().spines['top'].set_visible(False)
    plt.gca().spines['right'].set_visible(False)
    plt.savefig(img_byte_array, format='png')
    img_byte_array.seek(0)
    return img_byte_array


@router.message(Trigger(["–ö—É—Ä—Å"]))
async def send_anek(message: Message):
    user = User(id=message.from_user.id)
    img = uah_btc_euro_iad()
    text_file = BufferedInputFile(img.getvalue(), filename="fetch.png")
    return await message.reply_photo(caption=f'{user.link}, –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
                                             f'üí∑ –Æ–∞–Ω—å: {to_str(uah_to_usd(1))}\n'
                                             f'üí∂ –ï–≤—Ä–æ: {to_str(euro_to_usd(1))}\n'
                                             f'üßÄ BTC: {to_str(to_usd(1))}\n'

                                     , photo=text_file)


@router.message(F.photo)
@flags.throttling_key('default')
async def cmd_message_from_bot(message: Message):
    if message.from_user.id == owner_id and message.chat.type == 'private':
        await message.reply(message.photo[-1].file_id)


@router.message(F.text.startswith('.–∏–¥'))
@flags.throttling_key('default')
async def cmd_message_from_bot(message: Message):
    if not message.reply_to_message:

        if len(message.text.split()[1:]) == 0:
            return await message.reply(
                f'ID: {"@" + message.from_user.username if message.from_user.username else message.from_user.full_name} ‚Äî <code>{message.from_user.id}</code> \n'
                f'CHAT ID: {message.chat.title} ‚Äî <code>{message.chat.id}</code>')
        id = await get_user_id(message.text.split()[1:])

        return await message.reply(f'ID: {message.text.split()[1:][0]} ‚Äî <code>{id}</code> \n'
                                   f'CHAT ID: {message.chat.title} ‚Äî <code>{message.chat.id}</code>')
    if message.reply_to_message:
        return await message.reply(
            f'ID: {"@" + message.reply_to_message.from_user.username if message.reply_to_message.from_user.username else message.reply_to_message.from_user.full_name} ‚Äî <code>{message.reply_to_message.from_user.id}</code> '
            f'\nCHAT ID: {message.reply_to_message.chat.title} ‚Äî <code>{message.reply_to_message.chat.id}</code>')


def add(a, b):
    return a + b


def subtract(a, b):
    return a - b


def multiply(a, b):
    return a * b


def divide(a, b):
    return a / b


operations = {
    "+": add,
    "-": subtract,
    "*": multiply,
    "/": divide
}


def to_rpn(expression):
    # –†–∞–∑–±–∏–≤–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–ø–µ—Ä–∞–Ω–¥—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ —Å–∫–æ–±–∫–∏
    pattern = r"(\d+(?:\.\d+)?)|\s*([+\-*/^]|sqrt|[()])\s*"
    tokens = re.findall(pattern, expression)
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    output = []
    # –°—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    opstack = []
    # –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    priority = {
        "+": 1,
        "-": 1,
        "*": 2,
        "/": 2
    }
    for token in tokens:
        if token[0]:
            output.append(float(token[0]))
        elif token[1] == "(":
            opstack.append(token[1])
        elif token[1] == ")":
            while opstack and opstack[-1] != "(":
                output.append(opstack.pop())
            opstack.pop()  # –£–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –∏–∑ —Å—Ç–µ–∫–∞
        else:
            while opstack and priority.get(token[1], 0) <= priority.get(opstack[-1], 0):
                output.append(opstack.pop())
            opstack.append(token[1])
    while opstack:
        output.append(opstack.pop())
    return output


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–π –ø–æ–ª—å—Å–∫–æ–π –∑–∞–ø–∏—Å–∏
def calculate_rpn(expression):
    # –°—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
    stack = []
    for token in expression:
        if isinstance(token, float):
            stack.append(token)
        else:
            b = stack.pop()
            a = stack.pop()
            stack.append(operations[token](a, b))
    return stack[0]


@flags.throttling_key('default')
async def calc_handler(message):
    with suppress(ValueError):
        try:
            operands = str(message.text.split()[1:][0])

            text2 = '<b>üìü –†–µ—à–µ–Ω–∏–µ: </b>\n'
            rpn = to_rpn(operands)
            result = calculate_rpn(rpn)
            text2 += f'{result}'
            return await message.reply(text2)
        except ZeroDivisionError:
            return await message.reply('‚ùå –ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è!')
        except IndexError:
            return await message.reply('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞!')

    return await message.reply('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞!\n'
                               '–ü—Ä–∏–º–µ—Ä: —Ä–µ—à–∏ 1 + 1')


async def forward_from(message):
    return


@router.message(F.text == "‚ùå")
async def cancel_handler(m, state):
    await state.clear()
    return await m.reply(text="–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=remove)


@flags.throttling_key('default')
async def sql_handler(message):
    if message.from_user.id == owner_id:
        try:
            query = message.text[message.text.find(' '):]
            request = sql.executescriptSql(query, True, False)
            bot_msg = await message.answer(f'üïòPlease wait while me doing SQL request', parse_mode="Markdown")
            if bot_msg:
                await bot_msg.edit_text(f"üöÄSQL –ó–∞–ø—Ä–æ—Å –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
                                        f"{request}")
        except Exception as e:
            await message.answer(f"‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("‚ùå *–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞*", parse_mode="Markdown")


@router.message(Command("fetch"), IsOwner())
@flags.throttling_key('default')
async def fetch_handler(message):
    if message.from_user.id == owner_id:
        try:
            query = message.text[message.text.find(' '):]
            request = sql.executescriptSql(query, False, True)
            file = f'SQL: {request}\n'

            for index, i in enumerate(request, start=1):
                file += f'{index}. {i}\n'
            text_file = BufferedInputFile(bytes(file, 'utf-8'), filename="fetch.txt")
            with suppress(TelegramBadRequest):
                await message.reply_document(document=text_file,
                                             caption=f"–ó–∞–ø—Ä–æ—Å {query}.")
        except Exception as e:
            await message.answer(f"‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("‚ùå *–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞*", parse_mode="Markdown")


from datetime import datetime


@router.message(Command("logs"), IsOwner())
@flags.throttling_key('default')
async def logs_handler(message: Message):
    with suppress(TypeError):
        return await message.reply_document(
            document=FSInputFile(f'assets/logs/{datetime.now().strftime("%d.%m.%y")}.log')
        )

    return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏.")


@flags.throttling_key('default')
async def ban_handler(message: Message):
    if message.chat.id == message.from_user.id:
        user = User(id=message.from_user.id)
        return await message.reply(
            text=f'<i>üö´ {user.link}, –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ù–∞—Ä—É—à–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª Pegasus –±–æ—Ç–∞.</i>\n\n'
                 f'üìõ –ü—Ä–∏—á–∏–Ω–∞: <b>{user.ban.reason}</b>\n'
                 f'‚è± –í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–∞–Ω–∞ {"–ù–∞–≤—Å–µ–≥–¥–∞" if user.ban.is_always else timetostr((user.ban.to_date - datetime.now()).total_seconds())}'
            , disable_web_page_preview=True)


@router.message(Command("ping"), IsOwner())
@flags.throttling_key('default')
async def ping_handler(message: Message):
    if message.forward_date != None:
        return
    a = time.time()
    bot_msg = await message.answer(f'üïòPlease wait while me doing request', parse_mode="Markdown")
    if bot_msg:
        b = time.time()
        await bot_msg.edit_text(f'üöÄ –ü–∏–Ω–≥: *{round((b - a) * 1000)} ms*', parse_mode="Markdown")
